{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/looking-at-the-data/",
    "result": {"data":{"site":{"siteMetadata":{"title":"jordan rhea","siteUrl":"https://jordanrhea.com"}},"markdownRemark":{"id":"32bb3f5c-b85f-5a43-b82f-973baf755721","excerpt":"I wanted to take a look at the responses to the Game of Thrones data I got back in my Game of thrones season 8 bracket so I thought there were some good ways to…","html":"<p>I wanted to take a look at the responses to the Game of Thrones data I got back in <a href=\"\">my Game of thrones season 8 bracket</a> so I thought there were some good ways to leverage apps script to do that.</p>\n<p>You may be saying to yourself “But Jordan… you can just use <code class=\"language-text\">=COUNT(...)</code>” or some other built in formulas.</p>\n<p>To that I say… what is the fun in that? Lets write some code…</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token constant\">ANALYZE_RESPONSES</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">responses<span class=\"token punctuation\">,</span> colOrder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> headers <span class=\"token operator\">=</span> responses<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  colOrder <span class=\"token operator\">=</span> colOrder<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> analysis <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">character<span class=\"token punctuation\">,</span> ind</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>house<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> character<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' ['</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//first</span>\n    <span class=\"token keyword\">var</span> tally <span class=\"token operator\">=</span> colOrder<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> each</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      acc<span class=\"token punctuation\">[</span>each<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> responses<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      tally<span class=\"token punctuation\">[</span>responses<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//then aggregate the tally with the order of the columns</span>\n    <span class=\"token keyword\">var</span> aggregates <span class=\"token operator\">=</span> colOrder<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">col</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tally<span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> responses<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//add the conditional formatting to the table</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>house<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>aggregates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> analysis<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This gives us a formula that we can use to create:</p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <iframe frameborder=\"0\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vScXqQ2KxmzwUGRfRVtbYgfXXXNCu4ZJZwA06k_fl8Sc332WkIlIAY5ex85-nV1Cae9MyEw4wGW_KQb/pubhtml?gid=393715392&amp;single=true&amp;widget=true&amp;headers=false\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>","frontmatter":{"title":"Looking at the Data!","date":null,"description":null,"image":{"publicURL":"/static/c750346c5860720b98176b0b515085c8/look-at-the-data.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/c750346c5860720b98176b0b515085c8/e3dfa/look-at-the-data.png","srcSet":"/static/c750346c5860720b98176b0b515085c8/28642/look-at-the-data.png 298w,\n/static/c750346c5860720b98176b0b515085c8/7400b/look-at-the-data.png 596w,\n/static/c750346c5860720b98176b0b515085c8/e3dfa/look-at-the-data.png 1191w","sizes":"(min-width: 1191px) 1191px, 100vw"},"sources":[{"srcSet":"/static/c750346c5860720b98176b0b515085c8/c2e41/look-at-the-data.webp 298w,\n/static/c750346c5860720b98176b0b515085c8/9c80f/look-at-the-data.webp 596w,\n/static/c750346c5860720b98176b0b515085c8/13173/look-at-the-data.webp 1191w","type":"image/webp","sizes":"(min-width: 1191px) 1191px, 100vw"}]},"width":1191,"height":600}}}},"fields":{"date":"Tue Jun 04 2019 08:00:00 GMT+0800 (China Standard Time)","thumbnail":"","slug":"looking-at-the-data/"}},"previous":{"fields":{"slug":"build-a-find-and-replace-function-in-google-sheets/"},"frontmatter":{"title":"Build a Find and Replace function in Google Sheets"}},"next":{"fields":{"slug":"brackets-are-coming/"},"frontmatter":{"title":"Brackets are Coming"}}},"pageContext":{"id":"32bb3f5c-b85f-5a43-b82f-973baf755721","previousPostId":"98395e41-1693-5401-936f-cf965e29be8f","nextPostId":"fde1bd61-d232-5252-ac56-d8a224ad0cb8"}},
    "staticQueryHashes": ["1324386404","4144781314"]}