{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/build-a-find-and-replace-function-in-google-sheets/",
    "result": {"data":{"site":{"siteMetadata":{"title":"jordan rhea"}},"markdownRemark":{"id":"2f845ab9-4ca2-5fc9-9f03-b2c674d3d201","excerpt":"There are simple ways to find and replace in a spreadsheet built right into Google Sheets. And in Excel for that matter. What happens when we need to do itâ€¦","html":"<p>There are simple ways to find and replace in a spreadsheet built right into Google Sheets. And in Excel for that matter.</p>\n<h2>What happens when we need to do it <em>programmatically</em>?</h2>\n<p>Javascript comes with a few methods that we can use to make this happen. The difficulty is how do we implement them in Google Apps Script.</p>\n<p>Interacting with the data in the spreadsheet with apps script is where a lot of performance problems arise. So what we need to do is:</p>\n<ol>\n<li>Grab the range we want from the spreadsheet</li>\n<li>Read all of the values from that range</li>\n<li>Manipulate that range</li>\n<li>Write those values back to the spreadsheet</li>\n</ol>\n<p>With this flow we are really only interacting with the spreadsheet once.</p>\n<p>Here is how I implemented that on a spreadsheet filled with data from my Game of Thrones project a few weeks ago:</p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <iframe src=\"https://www.youtube.com/embed/PsOJ2CILCJ0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p>The full code is below:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">findAndReplace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//declare the range of data we are going to read</span>\n  <span class=\"token keyword\">var</span> range <span class=\"token operator\">=</span> SpreadsheetApp<span class=\"token punctuation\">.</span><span class=\"token function\">getActiveSpreadsheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDataRange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// grab all of the values from that range</span>\n  <span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> range<span class=\"token punctuation\">.</span><span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//using the map method each parameter is all of the values in each row</span>\n  <span class=\"token keyword\">var</span> found <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">row</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//with each row we can use reduce to process each row and return them as new rows</span>\n    <span class=\"token keyword\">return</span> row<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> cell<span class=\"token punctuation\">,</span> ind</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//if the cell is NOT a string OR the cell does NOT contain '@' we will skip it and just write the same value back into the row</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> cell <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> cell<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        acc<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cell<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">//for the cells the that contain the @ symbol we take just the value to the left</span>\n      acc<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cell<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//finally, step 4 we write the entire array of values back to the range</span>\n  range<span class=\"token punctuation\">.</span><span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are other ways to do this, but this is what I came up with. Check out the documentation on MDN:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array.map on MDN</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">Array.reduce on MDN</a></p>\n<p>If you have a better way to accomplish this, let me know in the comments below!</p>","frontmatter":{"title":"Build a Find and Replace function in Google Sheets","date":null,"description":null},"fields":{"date":"Tue May 21 2019 08:00:00 GMT+0800 (China Standard Time)"}},"previous":{"fields":{"slug":"brackets-are-coming/"},"frontmatter":{"title":"Brackets are Coming"}},"next":{"fields":{"slug":"keystone-calendars/"},"frontmatter":{"title":"Keystone Calendars"}}},"pageContext":{"id":"2f845ab9-4ca2-5fc9-9f03-b2c674d3d201","previousPostId":"74a08952-6ad0-53cd-ba54-39b22a43d0f2","nextPostId":"c0f8bcf2-b8c4-548d-b8b0-5e8c21dfe223"}},
    "staticQueryHashes": ["2841359383","4144781314"]}