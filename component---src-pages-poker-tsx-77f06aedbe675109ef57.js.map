{"version":3,"file":"component---src-pages-poker-tsx-77f06aedbe675109ef57.js","mappings":"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","sources":["webpack://rheajt.github.io/./src/components/seo.tsx","webpack://rheajt.github.io/./src/components/poker-card-selector.tsx","webpack://rheajt.github.io/./src/components/poker-form.tsx","webpack://rheajt.github.io/./src/components/poker-seats.tsx","webpack://rheajt.github.io/./src/utils/pokerReducer.ts","webpack://rheajt.github.io/./src/pages/poker.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useStaticQuery, graphql, HeadProps } from \"gatsby\";\n\ninterface Props {\n\tdescription?: string;\n\tlang?: string;\n\tmeta?: { name?: string; property?: string; content: string }[];\n\ttitle?: string;\n\timage?: string;\n}\n\nconst Seo: React.FC<Props> = ({\n\tdescription = \"\",\n\tlang = \"en\",\n\tmeta = [],\n\ttitle = \"jordanrhea.com\",\n\timage,\n}) => {\n\tconst { site } = useStaticQuery(\n\t\tgraphql`\n            query {\n                site {\n                    siteMetadata {\n                        title\n                        description\n                        siteUrl\n                        social {\n                            twitter\n                        }\n                    }\n                }\n            }\n        `\n\t);\n\n\tconst metaDescription = description || site.siteMetadata.description;\n\tconst defaultTitle = site.siteMetadata?.title;\n\n\tif (image) {\n\t\tconst content = image;\n\t\tmeta = [\n\t\t\t...meta,\n\t\t\t{\n\t\t\t\tproperty: `og:image`,\n\t\t\t\tcontent,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: `twitter:image`,\n\t\t\t\tcontent,\n\t\t\t},\n\t\t];\n\t}\n\n\treturn (\n\t\t<Helmet\n\t\t\thtmlAttributes={{\n\t\t\t\tlang,\n\t\t\t}}\n\t\t\ttitle={title}\n\t\t\ttitleTemplate={defaultTitle ? `%s | ${defaultTitle}` : undefined}\n\t\t\tmeta={[\n\t\t\t\t{\n\t\t\t\t\tname: `description`,\n\t\t\t\t\tcontent: metaDescription,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tproperty: `og:title`,\n\t\t\t\t\tcontent: title,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tproperty: `og:description`,\n\t\t\t\t\tcontent: metaDescription,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tproperty: `og:type`,\n\t\t\t\t\tcontent: `website`,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: `twitter:card`,\n\t\t\t\t\tcontent: `summary`,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: `twitter:creator`,\n\t\t\t\t\tcontent: site.siteMetadata?.social?.twitter || ``,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: `twitter:title`,\n\t\t\t\t\tcontent: title,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: `twitter:description`,\n\t\t\t\t\tcontent: metaDescription,\n\t\t\t\t},\n\t\t\t\t...meta,\n\t\t\t]}\n\t\t/>\n\t);\n};\n\nexport default Seo;\n","import React, { useState } from \"react\";\n\nconst suits = [\"clubs ♣\", \"diamonds ♦\", \"hearts ♥\", \"spades ♠\"];\nconst cards = [\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"10\",\n    \"J\",\n    \"Q\",\n    \"K\",\n    \"A\",\n];\n\nconst PokerCardSelector: React.FC = () => {\n    const [card, setCard] = useState(\"\");\n    const [suit, setSuit] = useState(\"\");\n\n    if (card === \"\" || suit === \"\") {\n        return (\n            <div>\n                <div>\n                    {cards.map(card => (\n                        <button onClick={() => setCard(card)} key={card}>\n                            {card}\n                        </button>\n                    ))}\n                </div>\n                <div>\n                    {suits.map(suit => (\n                        <button onClick={() => setSuit(suit[0])} key={suit}>\n                            {suit}\n                        </button>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <span\n            className=\"poker-card\"\n            onClick={() => {\n                setCard(\"\");\n                setSuit(\"\");\n            }}\n        >\n            {card}\n            {suit}\n        </span>\n    );\n};\n\nexport default PokerCardSelector;\n","import React, { FormEvent, useState } from \"react\";\nimport { PokerSeat } from \"../utils/pokerReducer\";\nimport PokerCardSelector from \"./poker-card-selector\";\n\nconst handAction = {\n    round: \"\",\n    action: \"\",\n};\n\nconst PokerForm: React.FC<{ seats: PokerSeat[] }> = ({ seats }) => {\n    const [handActions, setHandActions] = useState<typeof handAction[]>([]);\n\n    function handleSubmit(e: FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n\n        console.log(handActions);\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"pre-flop\">\n                <span>Dealt:</span>\n                <PokerCardSelector />\n                <PokerCardSelector />\n\n                <ActionSelect\n                    seats={seats}\n                    handleClick={() => {\n                        const updatedActions = [\n                            ...handActions,\n                            { round: \"pre-flop\", action: `stuff` },\n                        ];\n                        setHandActions(updatedActions);\n                    }}\n                >\n                    <div>\n                        {handActions\n                            .filter(ha => ha.round === \"pre-flop\")\n                            .map(ha => {\n                                return <p>{ha.action}</p>;\n                            })}\n                    </div>\n                </ActionSelect>\n            </div>\n            <div className=\"flop\">\n                <span>Flop</span>\n                <PokerCardSelector />\n                <PokerCardSelector />\n                <PokerCardSelector />\n\n                <ActionSelect\n                    seats={seats}\n                    handleClick={() => {\n                        const updatedActions = [\n                            ...handActions,\n                            { round: \"flop\", action: `stuff` },\n                        ];\n                        setHandActions(updatedActions);\n                    }}\n                >\n                    <div>\n                        {handActions\n                            .filter(ha => ha.round === \"flop\")\n                            .map(ha => {\n                                return <p>{ha.action}</p>;\n                            })}\n                    </div>\n                </ActionSelect>\n            </div>\n\n            <div className=\"turn\">\n                <span>Turn</span>\n                <PokerCardSelector />\n\n                <ActionSelect\n                    seats={seats}\n                    handleClick={() => {\n                        const updatedActions = [\n                            ...handActions,\n                            { round: \"turn\", action: `stuff` },\n                        ];\n                        setHandActions(updatedActions);\n                    }}\n                >\n                    <div>\n                        {handActions\n                            .filter(ha => ha.round === \"turn\")\n                            .map(ha => {\n                                return <p>{ha.action}</p>;\n                            })}\n                    </div>\n                </ActionSelect>\n            </div>\n\n            <div className=\"river\">\n                <span>River</span>\n                <PokerCardSelector />\n\n                <ActionSelect\n                    seats={seats}\n                    handleClick={() => {\n                        const updatedActions = [\n                            ...handActions,\n                            { round: \"river\", action: `stuff` },\n                        ];\n                        setHandActions(updatedActions);\n                    }}\n                >\n                    <div>\n                        {handActions\n                            .filter(ha => ha.round === \"river\")\n                            .map(ha => {\n                                return <p>{ha.action}</p>;\n                            })}\n                    </div>\n                </ActionSelect>\n            </div>\n\n            <div className=\"showdown\">\n                <button type=\"submit\">Save Hand</button>\n            </div>\n        </form>\n    );\n};\n\nexport default PokerForm;\n\nconst ActionSelect: React.FC<{\n    seats: PokerSeat[];\n    handleClick: () => void;\n    children: JSX.Element;\n}> = ({ seats, handleClick, children }) => {\n    return (\n        <>\n            <div className=\"poker-action\">\n                <select>\n                    <option value=\"UTG\">UTG</option>\n                    <option value=\"UTG+1\">UTG+1</option>\n                    <option value=\"MP\">MP</option>\n                    <option value=\"HJ\">HJ</option>\n                    <option value=\"CO\">CO</option>\n                    <option value=\"BTN\">BTN</option>\n                    <option value=\"SB\">SB</option>\n                    <option value=\"BB\">BB</option>\n                </select>\n\n                <select>\n                    {seats.map((s, idx) => {\n                        return (\n                            <option value={s.name} key={\"pre-flop-\" + idx}>\n                                {s.name}\n                            </option>\n                        );\n                    })}\n                </select>\n\n                <select>\n                    <option value=\"check\">check</option>\n                    <option value=\"bet\">bet</option>\n                    <option value=\"raise\">raise</option>\n                    <option value=\"call\">call</option>\n                    <option value=\"fold\">fold</option>\n                </select>\n\n                <input type=\"number\" />\n            </div>\n            <button onClick={handleClick}>+</button>\n\n            {children}\n        </>\n    );\n};\n","import React from \"react\";\nimport { PokerSeat } from \"../utils/pokerReducer\";\n\nconst PokerSeats: React.FC<{\n    seats: PokerSeat[];\n    handleUpdateSeat: (idx: number, update: Partial<PokerSeat>) => void;\n    handleAddSeat: () => void;\n}> = ({ seats, handleUpdateSeat, handleAddSeat }) => {\n    const updateSeat = (\n        idx: number,\n        e: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        console.log(\"on change\", idx);\n        if (e.target.type === \"checkbox\") {\n            let isChecked = e.target.checked;\n\n            handleUpdateSeat(idx, {\n                [e.target.name]: isChecked,\n            });\n        } else {\n            handleUpdateSeat(idx, {\n                [e.target.name]: e.target.value,\n            });\n        }\n    };\n    return (\n        <>\n            {seats.map((seat, idx) => {\n                return (\n                    <div className=\"poker-seat\" key={idx}>\n                        <input\n                            name=\"hero\"\n                            type=\"checkbox\"\n                            checked={seat.hero}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => updateSeat(idx, e)}\n                        />\n\n                        <input\n                            name=\"name\"\n                            value={seat.name}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => updateSeat(idx, e)}\n                        />\n\n                        <input\n                            name=\"in\"\n                            type=\"number\"\n                            value={seat.in}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => updateSeat(idx, e)}\n                        />\n\n                        <input\n                            name=\"out\"\n                            type=\"number\"\n                            value={seat.out}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => updateSeat(idx, e)}\n                        />\n                    </div>\n                );\n            })}\n\n            <button onClick={handleAddSeat}>+</button>\n        </>\n    );\n};\n\nexport default PokerSeats;\n","export interface PokerSeat {\n    name: string;\n    hero: boolean;\n    in?: number;\n    out?: number;\n}\n\n// export interface PokerHand {\n\n// }\n\ntype Actions =\n    | { type: \"add_seat\" }\n    | {\n        type: \"update_seat\";\n        payload: {\n            seatIdx: number;\n            update: Partial<PokerSeat>;\n        };\n    };\n\nconst initialSeat = {\n    name: \"\",\n    hero: false,\n    in: 0,\n};\n\nexport const initialState = {\n    seats: [initialSeat] as PokerSeat[],\n    hands: [],\n};\n\nexport const reducer = (state: typeof initialState, action: Actions) => {\n    switch (action.type) {\n        case \"add_seat\": {\n            state.seats.push(initialSeat);\n            return { ...state };\n        }\n\n        case \"update_seat\": {\n            let seat = state.seats[action.payload.seatIdx];\n            state.seats[action.payload.seatIdx] = {\n                ...seat,\n                ...action.payload.update,\n            };\n\n            console.log(state);\n            return { ...state };\n        }\n\n        // case \"add_hand\": {\n        //     const updatedHands = [...state.hands, action.payload];\n        //     return { ...state, hands: updatedHands };\n        // }\n\n        default:\n            return state;\n    }\n};\n","import { Link } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport React, { ReactNode, useReducer, useState } from \"react\";\nimport PokerForm from \"../components/poker-form\";\nimport PokerSeats from \"../components/poker-seats\";\nimport Seo from \"../components/seo\";\nimport { initialState, reducer } from \"../utils/pokerReducer\";\n\nconst PokerPanel: React.FC<{\n    title: string;\n    isActive: boolean;\n    handleClick: () => void;\n    children: ReactNode;\n}> = ({ title, isActive, handleClick, children }) => {\n    return (\n        <>\n            <button className=\"accordion\" onClick={handleClick}>\n                {title}\n            </button>\n\n            <div className={`panel ${isActive && \"active\"}`}>{children}</div>\n        </>\n    );\n};\n\nconst PokerPage: React.FC = () => {\n    const [activeSection, setActiveSection] = useState(0);\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        <div className=\"poker-page\">\n            <Seo title=\"Poker Notes\" />\n\n            <PokerPanel\n                title={`Game Seats (${state.seats.length})`}\n                isActive={activeSection === 1}\n                handleClick={() =>\n                    setActiveSection(val => (val === 1 ? -1 : 1))\n                }\n            >\n                <PokerSeats\n                    seats={state.seats}\n                    handleAddSeat={() =>\n                        dispatch({\n                            type: \"add_seat\",\n                        })\n                    }\n                    handleUpdateSeat={(idx, update) =>\n                        dispatch({\n                            type: \"update_seat\",\n                            payload: {\n                                seatIdx: idx,\n                                update,\n                            },\n                        })\n                    }\n                />\n            </PokerPanel>\n\n            <PokerPanel\n                title=\"Take Notes\"\n                isActive={activeSection === 2}\n                handleClick={() =>\n                    setActiveSection(val => (val === 2 ? -1 : 2))\n                }\n            >\n                <PokerForm seats={state.seats} />\n            </PokerPanel>\n\n            <PokerPanel\n                title={`All Hands (${state.hands.length})`}\n                isActive={activeSection === 3}\n                handleClick={() =>\n                    setActiveSection(val => (val === 3 ? -1 : 3))\n                }\n            >\n                <h1>all hands</h1>\n            </PokerPanel>\n            <footer>\n                <b>Poker Hand Notes</b>\n                <Link to=\"/\">\n                    <StaticImage\n                        layout=\"fixed\"\n                        formats={[\"auto\", \"webp\", \"avif\"]}\n                        src=\"../../content/img/jr-icon.png\"\n                        width={36}\n                        height={36}\n                        quality={95}\n                        alt=\"jordan rhea header\"\n                    />\n                </Link>\n            </footer>\n        </div>\n    );\n};\n\nexport default PokerPage;\n"],"names":["_ref","description","lang","meta","title","image","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","_site$siteMetadata","content","property","name","React","Helmet","htmlAttributes","titleTemplate","undefined","_site$siteMetadata2","social","_site$siteMetadata2$s","twitter","suits","cards","card","setCard","useState","suit","setSuit","map","onClick","key","className","seats","handActions","setHandActions","onSubmit","e","preventDefault","console","log","PokerCardSelector","ActionSelect","handleClick","updatedActions","round","action","filter","ha","type","_ref2","children","value","s","idx","handleUpdateSeat","handleAddSeat","updateSeat","target","isChecked","checked","seat","hero","onChange","in","out","initialSeat","initialState","hands","reducer","state","push","payload","seatIdx","update","PokerPanel","isActive","activeSection","setActiveSection","dispatch","useReducer","Seo","length","val","PokerSeats","PokerForm","Link","to","StaticImage","layout","formats","src","width","height","quality","alt","__imageData"],"sourceRoot":""}