{"version":3,"file":"component---src-templates-project-page-tsx-dc09f2b80994933bf421.js","mappings":"2JA8EA,IA1EY,WAAO,IAAD,IACRA,GAAOC,EAAAA,EAAAA,gBAAe,cAmBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAGC,EAAwBH,OACjCI,EAAM,UAAGN,EAAKG,KAAKC,oBAAb,aAAGG,EAAwBD,OAEvC,OACIE,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,OACXD,EAAAA,cAACE,EAAAA,EAAD,CACID,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,qCACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,+BARR,uBAWCf,MAAAA,OAAAA,EAAAA,EAAQgB,OACLV,EAAAA,cAAAA,MAAAA,KAAAA,cACeA,EAAAA,cAAAA,SAAAA,KAASN,EAAOgB,MAAe,KACzChB,MAAAA,OAAAA,EAAAA,EAAQiB,UAAW,KAFxB,IAIIX,EAAAA,cAAAA,IAAAA,KACIA,EAAAA,cAAAA,IAAAA,CACIY,KAAI,yBACAd,MAAAA,OAAAA,EAAAA,EAAQe,UAAR,KAFR,mCADJ,KASIb,EAAAA,cAAAA,IAAAA,CACIY,KAAI,wBACAd,MAAAA,OAAAA,EAAAA,EAAQgB,SAAR,KAFR,aATJ,KAiBId,EAAAA,cAAAA,IAAAA,CACIY,KAAI,6BACAd,MAAAA,OAAAA,EAAAA,EAAQiB,WAAR,KAFR,6B,wHChD5B,EAZ+C,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC9C,OACIhB,EAAAA,cAAAA,aAAAA,KACIA,EAAAA,cAAAA,IAAAA,KAAIgB,EAAMC,SACVjB,EAAAA,cAAAA,OAAAA,CAAMC,UAAU,UACZD,EAAAA,cAAAA,IAAAA,KAAIgB,EAAMtB,QADd,IAC0BM,EAAAA,cAAAA,KAAAA,MACrBgB,EAAME,YCmGvB,EA3D6C,SAAC,GAAwB,IAAD,EAKlC,EALa1B,EAAqB,EAArBA,KAAM2B,EAAe,EAAfA,SAC5CC,EAAU5B,EAAK6B,eACfC,GAAY,UAAA9B,EAAKG,KAAKC,oBAAV,eAAwB2B,QAAxB,QACdC,OAAQC,EAERL,EAAQM,YAAYF,MACpBA,GACI,UAAAhC,EAAKG,KAAKC,oBAAV,eAAwB+B,SACxBP,EAAQM,YAAYF,MAAMI,UACvBR,EAAQS,OAAOC,YACtBN,EAAQJ,EAAQS,OAAOC,WAG3B,OACI9B,EAAAA,cAAC+B,EAAAA,EAAD,CAAQZ,SAAUA,EAAUI,MAAOD,GAC/BtB,EAAAA,cAACgC,EAAAA,EAAD,CACIT,MAAOH,EAAQM,YAAYH,MAC3BU,YAAab,EAAQH,QACrBO,MAAOA,IAGXxB,EAAAA,cAAAA,UAAAA,CACIC,UAAU,YACViC,WAAS,EACTC,SAAS,6BAETnC,EAAAA,cAAAA,SAAAA,CAAQC,UAAU,iBACdD,EAAAA,cAACoC,EAAAA,EAAD,CACIZ,MACIJ,EAAQM,YAAYF,MAAMa,gBACrBC,gBAET7B,IAAI,kBAGRT,EAAAA,cAAAA,KAAAA,CAAIuC,SAAS,YAAYnB,EAAQM,YAAYH,QAGhDH,EAAQM,YAAYV,OACjBhB,EAAAA,cAAAA,UAAAA,KACIA,EAAAA,cAACwC,EAAD,CAAYxB,MAAOI,EAAQM,YAAYV,SAI/ChB,EAAAA,cAAAA,UAAAA,CACIyC,wBAAyB,CAAEC,OAAQtB,EAAQuB,MAC3CJ,SAAS,gBAGbvC,EAAAA,cAAAA,KAAAA,MAEAA,EAAAA,cAAAA,SAAAA,KACIA,EAAAA,cAAC4C,EAAAA,EAAD,W","sources":["webpack://rheajt.github.io/./src/components/bio.tsx","webpack://rheajt.github.io/./src/components/blockquote.tsx","webpack://rheajt.github.io/./src/templates/project-page.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\n\nconst Bio = () => {\n    const data = useStaticQuery(graphql`\n        query BioQuery {\n            site {\n                siteMetadata {\n                    author {\n                        name\n                        summary\n                    }\n                    social {\n                        twitter\n                        github\n                        linkedin\n                    }\n                }\n            }\n        }\n    `);\n\n    // Set these values by editing \"siteMetadata\" in gatsby-config.js\n    const author = data.site.siteMetadata?.author;\n    const social = data.site.siteMetadata?.social;\n\n    return (\n        <>\n            <div className=\"bio\">\n                <StaticImage\n                    className=\"bio-avatar\"\n                    layout=\"fixed\"\n                    formats={[\"auto\", \"webp\", \"avif\"]}\n                    src=\"../../content/img/avatar-image.png\"\n                    width={50}\n                    height={50}\n                    quality={95}\n                    alt=\"jordan rhea wearing a hoodie\"\n                />\n\n                {author?.name && (\n                    <div>\n                        Written by <strong>{author.name}</strong>{\" \"}\n                        {author?.summary || null}\n                        {` `}\n                        <p>\n                            <a\n                                href={`https://twitter.com/${\n                                    social?.twitter || ``\n                                }`}\n                            >\n                                You should follow me on Twitter\n                            </a>\n                            {`, `}\n                            <a\n                                href={`https://github.com/${\n                                    social?.github || ``\n                                }`}\n                            >\n                                or Github\n                            </a>\n                            {`, `}\n                            <a\n                                href={`https://linkedin.com/in/${\n                                    social?.linkedin || ``\n                                }`}\n                            >\n                                or even on LinkedIn\n                            </a>\n                        </p>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default Bio;\n","import React from \"react\";\nimport { Quote } from \"../pages\";\n\nconst Blockquote: React.FC<{ quote: Quote }> = ({ quote }) => {\n    return (\n        <blockquote>\n            <p>{quote.excerpt}</p>\n            <span className=\"author\">\n                <b>{quote.author}</b> <br />\n                {quote.position}\n            </span>\n        </blockquote>\n    );\n};\n\nexport default Blockquote;\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\";\nimport Blockquote from \"../components/blockquote\";\n\ninterface Props {\n    data: Data;\n    location: Location;\n}\n\ninterface Data {\n    site: {\n        siteMetadata: {\n            siteUrl: string;\n            title: string;\n        };\n    };\n    markdownRemark: {\n        id: string;\n        html: string;\n        excerpt: string;\n        frontmatter: {\n            title: string;\n            quote: {\n                author: string;\n                text: string;\n                employer: string;\n                position: string;\n                excerpt: string;\n                email?: string;\n            };\n            image: {\n                publicURL: string;\n                childImageSharp: {\n                    gatsbyImageData: IGatsbyImageData;\n                };\n            };\n        };\n        fields: {\n            date: string;\n            thumbnail: string;\n        };\n    };\n}\n\nconst ProjectPageTemplate: React.FC<Props> = ({ data, location }) => {\n    const project = data.markdownRemark;\n    const siteTitle = data.site.siteMetadata?.title || `Title`;\n    let image = undefined;\n\n    if (project.frontmatter.image) {\n        image =\n            data.site.siteMetadata?.siteUrl +\n            project.frontmatter.image.publicURL;\n    } else if (project.fields.thumbnail) {\n        image = project.fields.thumbnail;\n    }\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <Seo\n                title={project.frontmatter.title}\n                description={project.excerpt}\n                image={image}\n            />\n\n            <article\n                className=\"blog-post\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n            >\n                <header className=\"project-image\">\n                    <GatsbyImage\n                        image={\n                            project.frontmatter.image.childImageSharp\n                                .gatsbyImageData\n                        }\n                        alt=\"project image\"\n                    />\n\n                    <h1 itemProp=\"headline\">{project.frontmatter.title}</h1>\n                </header>\n\n                {project.frontmatter.quote && (\n                    <section>\n                        <Blockquote quote={project.frontmatter.quote} />\n                    </section>\n                )}\n\n                <section\n                    dangerouslySetInnerHTML={{ __html: project.html }}\n                    itemProp=\"articleBody\"\n                />\n\n                <hr />\n\n                <footer>\n                    <Bio />\n                </footer>\n            </article>\n        </Layout>\n    );\n};\n\nexport default ProjectPageTemplate;\n\nexport const projectsQuery = graphql`\n    query ProjectPagesById($id: String!) {\n        site {\n            siteMetadata {\n                title\n                siteUrl\n            }\n        }\n        markdownRemark(id: { eq: $id }) {\n            id\n            html\n            excerpt\n            frontmatter {\n                title\n                image {\n                    publicURL\n                    childImageSharp {\n                        gatsbyImageData(layout: CONSTRAINED)\n                    }\n                }\n                quote {\n                    author\n                    position\n                    employer\n                    text\n                    excerpt\n                }\n            }\n            fields {\n                date\n                thumbnail\n            }\n        }\n    }\n`;\n"],"names":["data","useStaticQuery","author","site","siteMetadata","_data$site$siteMetada","social","_data$site$siteMetada2","React","className","StaticImage","layout","formats","src","width","height","quality","alt","name","summary","href","twitter","github","linkedin","quote","excerpt","position","location","project","markdownRemark","siteTitle","title","image","undefined","frontmatter","siteUrl","publicURL","fields","thumbnail","Layout","Seo","description","itemScope","itemType","GatsbyImage","childImageSharp","gatsbyImageData","itemProp","Blockquote","dangerouslySetInnerHTML","__html","html","Bio"],"sourceRoot":""}