{"version":3,"file":"component---src-pages-contact-tsx-4bf417c855216e0b172c.js","mappings":"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","sources":["webpack://rheajt.github.io/./src/components/github-subscribe.tsx","webpack://rheajt.github.io/./src/components/youtube-subscribe.tsx","webpack://rheajt.github.io/./src/components/contact-icons.tsx","webpack://rheajt.github.io/./src/pages/contact.tsx","webpack://rheajt.github.io/./src/components/contact-form.tsx","webpack://rheajt.github.io/./src/components/StyledContainer.tsx","webpack://rheajt.github.io/./src/components/section.tsx"],"sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nexport const GithubSubscribe: React.FC = () => {\n    return (\n        <>\n            <Helmet>\n                <script\n                    async\n                    defer\n                    src=\"https://buttons.github.io/buttons.js\"\n                ></script>\n            </Helmet>\n            <a\n                className=\"github-button\"\n                href=\"https://github.com/rheajt\"\n                data-color-scheme=\"no-preference: light; light: light; dark: dark;\"\n                data-size=\"large\"\n                data-show-count=\"true\"\n                aria-label=\"Follow @rheajt on GitHub\"\n            >\n                Follow @rheajt\n            </a>\n        </>\n    );\n};\n","import React, { useRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\ninterface Props {\n    channelId: string;\n    layout: string;\n    count: string;\n}\nconst YoutubeSubscribe: React.FC<Props> = ({ channelId, layout, count }) => {\n    const subBtn = useRef<HTMLDivElement>(null);\n\n    return (\n        <>\n            <Helmet>\n                <script src=\"https://apis.google.com/js/platform.js\"></script>\n            </Helmet>\n\n            <div\n                ref={subBtn}\n                className=\"g-ytsubscribe\"\n                data-channelid={channelId}\n                data-layout={layout}\n                data-count={count}\n            />\n        </>\n    );\n};\n\nexport default YoutubeSubscribe;\n","import React from \"react\";\nimport { FaGithub, FaLinkedin, FaYoutube } from \"react-icons/fa\";\nimport styled from \"styled-components\";\nimport { GithubSubscribe } from \"./github-subscribe\";\nimport YoutubeSubscribe from \"./youtube-subscribe\";\n\nexport const ContactIcons: React.FC = () => {\n    return (\n        <StyledContainer>\n            <h3>Social Links</h3>\n            <div className=\"contact-icons\">\n                <a\n                    className=\"icon-container\"\n                    href=\"https://youtube.com/jordanrhea\"\n                    data-label=\"YouTube\"\n                >\n                    <div className=\"icon\">\n                        <span className=\"label\">\n                            <FaYoutube />\n                        </span>\n                    </div>\n\n                    <p className=\"description\">\n                        I turned my learning into a channel that some people\n                        have found useful. Come and join! <br />\n                    </p>\n\n                    <div>\n                        <YoutubeSubscribe\n                            channelId=\"UCwqNP1r17-2xJFweoACbW8g\"\n                            layout=\"default\"\n                            count=\"default\"\n                        />\n                    </div>\n                </a>\n\n                <a className=\"icon-container\" href=\"\" data-label=\"GitHub\">\n                    <div className=\"icon\">\n                        <span className=\"label\">\n                            <FaGithub />\n                        </span>\n                    </div>\n\n                    <p className=\"description\">\n                        Github is where I share the code\n                    </p>\n\n                    <div>\n                        <GithubSubscribe />\n                    </div>\n                </a>\n\n                <a className=\"icon-container\" href=\"\" data-label=\"LinkedIn\">\n                    <div className=\"icon\">\n                        <span className=\"label\">\n                            <FaLinkedin />\n                        </span>\n                    </div>\n\n                    <p className=\"description\">\n                        More information about what I do is on LinkedIn\n                    </p>\n                </a>\n\n                <a className=\"icon-container\" href=\"\">\n                    <div className=\"icon\">\n                        <FaLinkedin />\n                    </div>\n\n                    <p className=\"description\">\n                        More information about what I do is on LinkedIn\n                    </p>\n                </a>\n            </div>\n        </StyledContainer>\n    );\n};\n\nconst StyledContainer = styled.div`\n    margin: 0 auto;\n    max-width: 800px;\n    padding: 3em 0.25em;\n\n    a {\n        color: var(--color-text);\n        text-decoration: none;\n    }\n\n    @media (max-width: 768px) {\n        padding: 2em 0.25em;\n        max-width: var(--maxWidth-sm);\n    }\n    .contact-icons {\n        margin-top: 1em;\n        margin-bottom: 1em;\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n        grid-gap: 1em;\n        justify-content: space-between;\n        justify-items: center;\n    }\n\n    .icon-container {\n        display: flex;\n        flex-direction: column;\n        text-decoration: none;\n        max-width: 320px;\n        padding: 1em;\n        transition: all 300ms;\n        text-align: center;\n        position: relative;\n\n        &::after {\n            content: attr(data-label);\n            font-weight: 700;\n            visibility: hidden;\n            display: block;\n            height: 0;\n            overflow: hidden;\n            pointer-events: none;\n        }\n\n        .icon {\n            text-align: center;\n            font-size: 3em;\n        }\n\n        .label {\n            font-weight: 400;\n            transition: font-weight 0.05s linear;\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        &:hover .label {\n            font-weight: 700;\n        }\n\n        .description {\n            flex: 1;\n        }\n\n        &:hover {\n            background-color: white;\n            border: 1px solid lightgray;\n        }\n    }\n`;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { ContactForm } from \"../components/contact-form\";\nimport { ContactIcons } from \"../components/contact-icons\";\nimport Layout from \"../components/layout\";\nimport { Section } from \"../components/section\";\nimport Seo from \"../components/seo\";\nimport { StyledContainer } from \"../components/StyledContainer\";\n\ninterface Props {\n    location: Location;\n}\n\nconst ContactPage: React.FC<Props> = ({ location }) => {\n    const siteTitle = \"jordanrhea.com\";\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <Seo title=\"Contact\" />\n\n            <Section>\n                <StyledContainer>\n                    <ContactForm />\n                </StyledContainer>\n\n                <ContactIcons />\n            </Section>\n        </Layout>\n    );\n};\n\nexport default ContactPage;\n","import React from \"react\";\nimport { styled } from \"styled-components\";\n\ninterface CustomFormElement extends HTMLFormElement {\n    your_name: HTMLInputElement;\n    message: HTMLTextAreaElement;\n}\n\nconst initialVals = {\n    your_name: \"\",\n    your_email: \"\",\n    service: \"\",\n    topic: \"\",\n    message: \"\",\n    isAnonymous: true,\n    isNewsletter: true,\n};\n\ninterface ContactFormProps {\n    data?: Partial<typeof initialVals>;\n}\n\nexport const ContactForm: React.FC<ContactFormProps> = props => {\n    const [isDisabled, setIsDisabled] = React.useState(true);\n    const [isSent, setSent] = React.useState(false);\n    const [percentage, setPercentage] = React.useState(0);\n    const [vals, setVals] = React.useState({ ...initialVals, ...props.data });\n\n    React.useEffect(() => {\n        const wordCount = vals.message.split(\" \").length;\n        const charCount = vals.message.length;\n\n        setPercentage(\n            Math.min(\n                100,\n                Math.max(\n                    0,\n                    ((charCount / 100) * 100 + (wordCount / 50) * 100) / 2,\n                ),\n            ),\n        );\n\n        if (\n            percentage === 100 &&\n            vals.your_name.length !== 0 &&\n            vals.your_email.length !== 0\n        ) {\n            setIsDisabled(false);\n        } else {\n            setIsDisabled(true);\n        }\n    }, [vals]);\n\n    async function handleSubmit(e: React.FormEvent<CustomFormElement>) {\n        e.preventDefault();\n\n        const deploymentId =\n            \"AKfycbyhUP2UI4NOia08Ey5yykiLYERXLRyHF_fBZVBiH9rKYeWDLOmy4AdRtmPuMzS7Dsg\";\n\n        const endpoint = `https://script.google.com/macros/s/${deploymentId}/exec`;\n\n        try {\n            const resp = await fetch(endpoint, {\n                redirect: \"follow\",\n                method: \"post\",\n                headers: {\n                    \"content-type\": \"text/plain\",\n                },\n                body: JSON.stringify(vals),\n            });\n            const json = await resp.json();\n\n            if (json.status === \"done\") {\n                setSent(true);\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    function handleChange(name: string, val: string | boolean) {\n        console.log(name, val);\n        setVals({ ...vals, [name]: val });\n    }\n\n    if (isSent) {\n        return (\n            <div\n                style={{\n                    display: \"grid\",\n                    placeItems: \"center\",\n                    width: \"100%\",\n                    height: 200,\n                }}\n            >\n                <b>Sent!</b>\n            </div>\n        );\n    }\n\n    console.log(\"topic\", vals.topic);\n    return (\n        <>\n            {vals.topic ? (\n                <>\n                    <i>Lets talk more about </i>\n                    <b>\n                        {vals.topic\n                            .split(\" \")\n                            .map(t => `#${t}`)\n                            .join(\", \")}\n                    </b>\n                </>\n            ) : null}\n\n            <StyledForm onSubmit={handleSubmit}>\n                <FormInput\n                    type=\"text\"\n                    name=\"your_name\"\n                    placeholder=\"Name\"\n                    value={vals.your_name}\n                    handleChange={handleChange}\n                />\n\n                <FormInput\n                    name=\"your_email\"\n                    type=\"email\"\n                    value={vals.your_email}\n                    placeholder=\"Email\"\n                    handleChange={handleChange}\n                />\n\n                <FormInput\n                    type=\"textarea\"\n                    name=\"message\"\n                    label=\"Send me a message! I love meeting new people and talking about data systems.\"\n                    placeholder={vals.message}\n                    value={vals.message}\n                    val={percentage}\n                    handleChange={handleChange}\n                />\n\n                <div className=\"actions full-width\">\n                    <button type=\"submit\" disabled={isDisabled}>\n                        Send\n                    </button>\n\n                    <div className=\"checkbox-group\">\n                        <FormCheckbox\n                            name=\"isNewsletter\"\n                            label=\"Newsletter?\"\n                            handleChange={handleChange}\n                            isChecked={vals.isNewsletter}\n                        />\n\n                        <FormCheckbox\n                            name=\"isAnonymous\"\n                            label=\"Stay anonymous?\"\n                            handleChange={handleChange}\n                            isChecked={vals.isAnonymous}\n                        />\n                    </div>\n                </div>\n            </StyledForm>\n        </>\n    );\n};\n\ntype HandleChange = (name: string, val: string | boolean) => void;\n\nconst StyledFormCheckbox = styled.div`\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n\n    input[type=\"checkbox\"] {\n        width: 16px;\n        height: 16px;\n        margin: 0;\n        accent-color: var(--color-primary);\n    }\n\n    label {\n        display: inline-block;\n        padding-left: 0.25rem;\n        margin: 0;\n        cursor: pointer;\n    }\n`;\nconst FormCheckbox: React.FC<{\n    name: string;\n    label: string;\n    isChecked: boolean;\n    handleChange: HandleChange;\n}> = ({ name, label, isChecked, handleChange }) => {\n    return (\n        <StyledFormCheckbox>\n            <input\n                type=\"checkbox\"\n                id={name}\n                name={name}\n                onChange={e => handleChange(name, e.target.checked)}\n                checked={isChecked}\n            />\n\n            <label htmlFor={name}>{label}</label>\n        </StyledFormCheckbox>\n    );\n};\n\ntype FormInputProps =\n    | {\n          type: \"text\" | \"email\";\n          name: string;\n          value: string;\n          placeholder: string;\n          handleChange: HandleChange;\n      }\n    | {\n          type: \"textarea\";\n          name: string;\n          placeholder: string;\n          value: string;\n          label: string;\n          val: number;\n          handleChange: HandleChange;\n      };\nconst StyledFormInput = styled.div`\n    &.full-width {\n        grid-column: 1 / -1;\n    }\n\n    label {\n        display: block;\n    }\n\n    input,\n    select,\n    textarea {\n        padding: 8px;\n        width: 100%;\n        border-radius: 3px;\n        border: 1px solid lightgray;\n\n        &:focus {\n            outline: none;\n            border: 1px solid var(--color-primary);\n        }\n    }\n`;\nconst FormInput: React.FC<FormInputProps> = props => {\n    if (props.type === \"textarea\") {\n        return (\n            <StyledFormInput className=\"full-width\">\n                <label htmlFor={props.name}>{props.label}</label>\n                <textarea\n                    className=\"full-width\"\n                    name={props.name}\n                    value={props.value}\n                    onChange={e =>\n                        props.handleChange(e.target.name, e.target.value)\n                    }\n                    placeholder={props.placeholder}\n                    rows={7}\n                ></textarea>\n                <Progress val={props.val > 1 ? props.val : 0} />\n            </StyledFormInput>\n        );\n    }\n\n    return (\n        <StyledFormInput>\n            <label htmlFor={props.name}>{props.placeholder}</label>\n            <input\n                type={props.type}\n                placeholder={props.placeholder}\n                name={props.name}\n                value={props.value}\n                onChange={e =>\n                    props.handleChange(e.target.name, e.target.value)\n                }\n            />\n        </StyledFormInput>\n    );\n};\n\nconst Progress: React.FC<{ val: number }> = ({ val }) => {\n    return (\n        <div style={{ width: \"100%\", border: \"1px solid lightgray\" }}>\n            <div\n                style={{\n                    backgroundColor: \"var(--color-primary)\",\n                    height: 10,\n                    width: `${val}%`,\n                }}\n            ></div>\n        </div>\n    );\n};\n\nconst StyledForm = styled.form`\n    display: grid;\n    margin-top: 1em;\n    margin-bottom: 1em;\n    grid-gap: 1em;\n    grid-template-columns: 1fr 1fr;\n\n    button {\n        padding: 0.5rem 1rem;\n        border-radius: 3px;\n        border: 1px solid lightgray;\n        font-weight: 700;\n        cursor: pointer;\n        transition:\n            transform 120ms ease,\n            box-shadow 120ms ease;\n\n        &[type=\"submit\"] {\n            background-color: var(--color-primary);\n            color: white;\n            box-shadow: 0 6px 18px rgba(40, 53, 151, 0.12);\n        }\n\n        &:disabled {\n            background-color: #ddd;\n            color: #777;\n            cursor: not-allowed;\n            opacity: 0.7;\n            box-shadow: none;\n            transform: none;\n        }\n    }\n\n    .actions {\n        grid-column: 1 / -1;\n        display: flex;\n        align-items: center;\n        gap: 1rem;\n        width: 100%;\n    }\n\n    /* push the first checkbox (newsletter) to the far right so they appear grouped */\n    .actions > div:first-of-type {\n        margin-left: auto;\n        display: inline-flex;\n        gap: 0.75rem;\n        align-items: center;\n    }\n\n    @media (max-width: 600px) {\n        .actions {\n            flex-direction: column;\n            align-items: stretch;\n        }\n        .actions > div:first-of-type {\n            margin-left: 0;\n            justify-content: flex-start;\n        }\n        button[type=\"submit\"] {\n            width: 100%;\n        }\n    }\n`;\n// <FormService active={vals.service} handleChange={handleChange} />\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled.div`\n    margin: 0 auto;\n    max-width: 800px;\n    padding: 6em 0.25em;\n\n    @media (max-width: 768px) {\n        padding: 2em 0.25em;\n        max-width: var(--maxWidth-sm);\n    }\n`;\n","import React from \"react\";\nimport { styled } from \"styled-components\";\n\ntype SectionProps = {\n\tchildren: React.ReactNode;\n\tclassName?: string;\n\tid?: string;\n\tstyle?: React.CSSProperties;\n};\n\nexport const Section = (props: SectionProps) => {\n\treturn (\n\t\t<StyledSection\n\t\t\tclassName={props.className}\n\t\t\tid={props.id}\n\t\t\tstyle={props.style}\n\t\t>\n\t\t\t{props.children}\n\t\t</StyledSection>\n\t);\n};\n\nconst StyledSection = styled.section`\n    padding: 3em 0.25em;\n    margin: 0 auto;\n    max-width: 800px;\n\n    @media (max-width: 768px) {\n        padding: 2em 0.25em;\n        max-width: var(--maxWidth-sm);\n    }\n`;\n"],"names":["GithubSubscribe","React","Helmet","async","defer","src","className","href","_ref","channelId","layout","count","subBtn","useRef","ref","ContactIcons","StyledContainer","FaYoutube","YoutubeSubscribe","FaGithub","FaLinkedin","styled","div","withConfig","displayName","componentId","location","Layout","title","Seo","Section","ContactForm","initialVals","your_name","your_email","service","topic","message","isAnonymous","isNewsletter","props","isDisabled","setIsDisabled","isSent","setSent","percentage","setPercentage","vals","setVals","data","handleChange","name","val","console","log","wordCount","split","length","charCount","Math","min","max","style","display","placeItems","width","height","map","t","join","StyledForm","onSubmit","e","preventDefault","resp","fetch","redirect","method","headers","body","JSON","stringify","json","status","err","FormInput","type","placeholder","value","label","disabled","FormCheckbox","isChecked","StyledFormCheckbox","id","onChange","target","checked","htmlFor","StyledFormInput","rows","Progress","_ref2","border","backgroundColor","form","StyledSection","children","section"],"sourceRoot":""}