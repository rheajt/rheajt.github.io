{"version":3,"file":"component---src-pages-projects-tsx-796ef9d5c79e941c5dbe.js","mappings":"qKAqEA,IAhEY,WAAO,IAAD,IACRA,GAAOC,EAAAA,EAAAA,gBAAe,cAoBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAGC,EAAwBH,OACjCI,EAAM,UAAGN,EAAKG,KAAKC,oBAAb,aAAGG,EAAwBD,OAEvC,OACIE,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,OACXD,EAAAA,cAACE,EAAAA,EAAD,CACID,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,qCACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,+BARR,uBAWCf,aAAAA,EAAAA,EAAQgB,OACLV,EAAAA,cAAAA,MAAAA,KAAAA,cACeA,EAAAA,cAAAA,SAAAA,KAASN,EAAOgB,MAAe,KACzChB,aAAAA,EAAAA,EAAQiB,UAAW,KAFxB,IAIIX,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,gBACXD,EAAAA,cAAAA,IAAAA,CAAGY,KAAMd,EAAOe,SACZb,EAAAA,cAACc,EAAAA,IAAD,OAEJd,EAAAA,cAAAA,IAAAA,CAAGY,KAAMd,EAAOiB,UACZf,EAAAA,cAACgB,EAAAA,IAAD,OAEJhB,EAAAA,cAAAA,IAAAA,CAAGY,KAAMd,EAAOmB,SACZjB,EAAAA,cAACkB,EAAAA,IAAD,OAEJlB,EAAAA,cAAAA,IAAAA,CAAGY,KAAMd,EAAOqB,QACZnB,EAAAA,cAACoB,EAAAA,IAAD,UAtDhC,C,yDCuBA,IAvBwD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjDC,GAAQC,EAAAA,EAAAA,GAASF,EAAQG,YAAYF,OAE3C,OACItB,EAAAA,cAACyB,EAAAA,KAAD,CAAMC,GAAE,aAAeL,EAAQM,OAAOC,MAClC5B,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,gBACVqB,GACGtB,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,SACXD,EAAAA,cAAC6B,EAAAA,EAAD,CACIP,MAAOA,EACPb,IAAKY,EAAQG,YAAYM,SAIrC9B,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,eACXD,EAAAA,cAAAA,KAAAA,KAAKqB,EAAQG,YAAYM,OACzB9B,EAAAA,cAAAA,IAAAA,KAAIqB,EAAQU,WAhBhC,C,oFCqEA,UAhE6C,SAAC,GAAuB,MAArBvC,EAAqB,EAArBA,KAAMwC,EAAe,EAAfA,SAC5CC,GAAY,UAAAzC,EAAKG,KAAKC,oBAAV,eAAwBkC,QAAxB,QACZI,EAAW1C,EAAK2C,kBAAkBC,MAExC,OAAwB,IAApBF,EAASG,OAELrC,EAAAA,cAACsC,EAAAA,EAAD,CAAQN,SAAUA,EAAUF,MAAOG,GAC/BjC,EAAAA,cAACuC,EAAAA,EAAD,CAAKT,MAAM,cACX9B,EAAAA,cAACwC,EAAAA,EAAD,MACAxC,EAAAA,cAAAA,IAAAA,KAAAA,yBAMRA,EAAAA,cAACsC,EAAAA,EAAD,CAAQN,SAAUA,EAAUF,MAAOG,GAC/BjC,EAAAA,cAACuC,EAAAA,EAAD,CAAKT,MAAM,iBACX9B,EAAAA,cAACwC,EAAAA,EAAD,MAEAxC,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,iBACViC,EAASO,KAAI,SAACC,GACX,OAAO1C,EAAAA,cAAC2C,EAAAA,EAAD,CAAaC,IAAKF,EAAEG,GAAIxB,QAASqB,GAD3C,KApBjB,C","sources":["webpack://rheajt.github.io/./src/components/bio.tsx","webpack://rheajt.github.io/./src/components/project-card.tsx","webpack://rheajt.github.io/./src/pages/projects.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport { FaGithub, FaLinkedin, FaTwitter, FaYoutube } from \"react-icons/fa\";\n\nconst Bio = () => {\n    const data = useStaticQuery(graphql`\n        query BioQuery {\n            site {\n                siteMetadata {\n                    author {\n                        name\n                        summary\n                    }\n                    social {\n                        twitter\n                        github\n                        linkedin\n                        youtube\n                    }\n                }\n            }\n        }\n    `);\n\n    // Set these values by editing \"siteMetadata\" in gatsby-config.js\n    const author = data.site.siteMetadata?.author;\n    const social = data.site.siteMetadata?.social;\n\n    return (\n        <>\n            <div className=\"bio\">\n                <StaticImage\n                    className=\"bio-avatar\"\n                    layout=\"fixed\"\n                    formats={[\"auto\", \"webp\", \"avif\"]}\n                    src=\"../../content/img/avatar-image.png\"\n                    width={50}\n                    height={50}\n                    quality={95}\n                    alt=\"jordan rhea wearing a hoodie\"\n                />\n\n                {author?.name && (\n                    <div>\n                        Written by <strong>{author.name}</strong>{\" \"}\n                        {author?.summary || null}\n                        {` `}\n                        <div className=\"social-links\">\n                            <a href={social.twitter}>\n                                <FaTwitter />\n                            </a>\n                            <a href={social.linkedin}>\n                                <FaLinkedin />\n                            </a>\n                            <a href={social.youtube}>\n                                <FaYoutube />\n                            </a>\n                            <a href={social.github}>\n                                <FaGithub />\n                            </a>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default Bio;\n","import React from \"react\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\nimport { Link } from \"gatsby\";\nimport { ProjectPage } from \"../types/ProjectPage\";\n\nconst ProjectCard: React.FC<{ project: ProjectPage }> = ({ project }) => {\n    const image = getImage(project.frontmatter.image);\n\n    return (\n        <Link to={`/projects/${project.fields.slug}`}>\n            <div className=\"project-card\">\n                {image && (\n                    <div className=\"image\">\n                        <GatsbyImage\n                            image={image}\n                            alt={project.frontmatter.title}\n                        />\n                    </div>\n                )}\n                <div className=\"description\">\n                    <h6>{project.frontmatter.title}</h6>\n                    <p>{project.excerpt}</p>\n                </div>\n            </div>\n        </Link>\n    );\n};\n\nexport default ProjectCard;\n","import * as React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\n// import { format } from \"date-fns\";\nimport { ProjectPageProps } from \"../types/ProjectPage\";\nimport ProjectCard from \"../components/project-card\";\n\nconst Projects: React.FC<ProjectPageProps> = ({ data, location }) => {\n    const siteTitle = data.site.siteMetadata?.title || `Title`;\n    const projects = data.allMarkdownRemark.nodes;\n\n    if (projects.length === 0) {\n        return (\n            <Layout location={location} title={siteTitle}>\n                <Seo title=\"All posts\" />\n                <Bio />\n                <p>No blog posts found.</p>\n            </Layout>\n        );\n    }\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <Seo title=\"All Projects\" />\n            <Bio />\n\n            <div className=\"project-cards\">\n                {projects.map((p: any) => {\n                    return <ProjectCard key={p.id} project={p} />;\n                })}\n            </div>\n            {/*<ol style={{ listStyle: `none` }}>\n                {projects.map((project: ProjectPage) => {\n                    const title =\n                        project.frontmatter.title || project.fields.slug;\n\n                    return (\n                        <li key={project.fields.slug}>\n                            <article\n                                className=\"post-list-item\"\n                                itemScope\n                                itemType=\"http://schema.org/Article\"\n                            >\n                                <header>\n                                    <h2>\n                                        <Link\n                                            to={project.fields.slug}\n                                            itemProp=\"url\"\n                                        >\n                                            <span itemProp=\"headline\">\n                                                {title}\n                                            </span>\n                                        </Link>\n                                    </h2>\n                                    <small>\n                                        {format(\n                                            new Date(project.fields.date),\n                                            \"PPP\"\n                                        )}\n                                    </small>\n                                </header>\n                            </article>\n                        </li>\n                    );\n                })}\n            </ol>\n        */}\n        </Layout>\n    );\n};\n\nexport default Projects;\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(\n            filter: { fields: { category: { eq: \"project\" } } }\n            sort: { fields: [fields___date], order: DESC }\n        ) {\n            nodes {\n                fields {\n                    slug\n                    date\n                }\n                frontmatter {\n                    title\n                    image {\n                        childImageSharp {\n                            gatsbyImageData(layout: CONSTRAINED)\n                        }\n                    }\n                }\n                excerpt\n            }\n        }\n    }\n`;\n"],"names":["data","useStaticQuery","author","site","siteMetadata","_data$site$siteMetada","social","_data$site$siteMetada2","React","className","StaticImage","layout","formats","src","width","height","quality","alt","name","summary","href","twitter","FaTwitter","linkedin","FaLinkedin","youtube","FaYoutube","github","FaGithub","project","image","getImage","frontmatter","Link","to","fields","slug","GatsbyImage","title","excerpt","location","siteTitle","projects","allMarkdownRemark","nodes","length","Layout","Seo","Bio","map","p","ProjectCard","key","id"],"sourceRoot":""}