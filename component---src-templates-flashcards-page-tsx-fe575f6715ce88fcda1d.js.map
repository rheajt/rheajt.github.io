{"version":3,"file":"component---src-templates-flashcards-page-tsx-fe575f6715ce88fcda1d.js","mappings":"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","sources":["webpack://rheajt.github.io/./src/templates/flashcards-page.tsx","webpack://rheajt.github.io/./src/components/section.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { Section } from \"../components/section\";\nimport { SimpleLayout } from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport styled from \"styled-components\";\n\nexport const pageQuery = graphql`\n    query lesson($lesson: Int!) {\n        allGoogleTutoringSheet(filter: { lesson: { eq: $lesson } }) {\n            nodes {\n                chinese\n                pinyin\n                partOfSpeech\n                english\n                category\n            }\n        }\n    }\n`;\n\ntype LessonTopic = {\n    chinese: string;\n    pinyin?: string;\n    part_of_speech?: string;\n    english: string;\n    category?: string;\n};\n\nexport default function FlashcardsPage(props: any) {\n    const vocabulary = props.data.allGoogleTutoringSheet.nodes;\n\n    const [currentIndex, setCurrentIndex] = React.useState(0);\n\n    return (\n        <SimpleLayout>\n            <Seo title={`Flashcards from ${props.pageContext.id}`} />\n\n            <Section>\n                <Container>\n                    <CardArea>\n                        {vocabulary && vocabulary.length > 0 ? (\n                            <Flashcard item={vocabulary[currentIndex]} />\n                        ) : (\n                            <div>No vocabulary</div>\n                        )}\n                    </CardArea>\n\n                    <NavRow>\n                        <NavButton\n                            onClick={() => {\n                                if (!vocabulary || vocabulary.length === 0)\n                                    return;\n                                const newIndex =\n                                    (currentIndex - 1 + vocabulary.length) %\n                                    vocabulary.length;\n                                setCurrentIndex(newIndex);\n                            }}\n                            aria-label=\"Previous card\"\n                        >\n                            Prev\n                        </NavButton>\n\n                        <Counter>\n                            {currentIndex + 1} / {vocabulary?.length || 0}\n                        </Counter>\n\n                        <NavButton\n                            onClick={() => {\n                                if (!vocabulary || vocabulary.length === 0)\n                                    return;\n                                const newIndex =\n                                    (currentIndex + 1) % vocabulary.length;\n                                setCurrentIndex(newIndex);\n                            }}\n                            aria-label=\"Next card\"\n                        >\n                            Next\n                        </NavButton>\n                    </NavRow>\n                </Container>\n            </Section>\n        </SimpleLayout>\n    );\n}\n\nconst Flashcard = ({ item }: { item: LessonTopic }) => {\n    const [isFlipped, setIsFlipped] = React.useState<boolean>(false);\n\n    const playChinese = (text: string) => {\n        if (typeof window === \"undefined\" || !(\"speechSynthesis\" in window)) {\n            console.warn(\"SpeechSynthesis not supported\");\n            return;\n        }\n\n        if (!text) return;\n\n        try {\n            window.speechSynthesis.cancel();\n            const utterance = new SpeechSynthesisUtterance(text || \"\");\n            utterance.lang = \"zh-CN\";\n            utterance.rate = 0.75;\n            window.speechSynthesis.speak(utterance);\n        } catch (err) {\n            console.warn(\"TTS error\", err);\n        }\n    };\n\n    return (\n        <CardOuter>\n            <CardInner\n                flipped={isFlipped.toString()}\n                onClick={() => setIsFlipped(prev => !prev)}\n                role=\"button\"\n                tabIndex={0}\n                onKeyDown={e => {\n                    if (e.key === \"Enter\" || e.key === \" \") {\n                        e.preventDefault();\n                        setIsFlipped(prev => !prev);\n                    }\n                }}\n            >\n                <CardFront>\n                    <SpeakerButton\n                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n                            e.stopPropagation();\n                            e.preventDefault();\n                            playChinese(item.chinese);\n                        }}\n                        aria-label=\"Play pronunciation\"\n                        title=\"Play pronunciation\"\n                    >\n                        ðŸ”Š\n                    </SpeakerButton>\n\n                    <ChineseText>{item.chinese}</ChineseText>\n                    <PinyinText>{item.pinyin}</PinyinText>\n                </CardFront>\n\n                <CardBack>\n                    <EnglishText>{item.english}</EnglishText>\n                    {item.part_of_speech && <POS>{item.part_of_speech}</POS>}\n                </CardBack>\n            </CardInner>\n        </CardOuter>\n    );\n};\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding-top: 2em;\n    gap: 16px;\n`;\n\nconst NavRow = styled.div`\n    display: flex;\n    align-items: center;\n    gap: 12px;\n`;\n\nconst NavButton = styled.button`\n    padding: 6px 10px;\n    border-radius: 4px;\n    border: 1px solid #ddd;\n    background: #fff;\n    cursor: pointer;\n    &:disabled {\n        opacity: 0.5;\n        cursor: not-allowed;\n    }\n`;\n\nconst CardArea = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Counter = styled.div`\n    font-size: 0.9rem;\n    color: #666;\n`;\n\nconst CardOuter = styled.div`\n    perspective: 1000px;\n`;\n\nconst CardInner = styled.div<{ flipped: string }>`\n    width: 360px;\n    height: 500px;\n    position: relative;\n    transform-style: preserve-3d;\n    transition: transform 0.6s;\n    transform: ${({ flipped }) =>\n        flipped === \"true\" ? \"rotateY(180deg)\" : \"none\"};\n    cursor: pointer;\n`;\n\nconst CardFace = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    backface-visibility: hidden;\n    border-radius: 8px;\n    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.12);\n    padding: 12px;\n`;\n\nconst CardFront = styled(CardFace)`\n    background: #fff;\n`;\n\nconst CardBack = styled(CardFace)`\n    background: #f7f7f7;\n    transform: rotateY(180deg);\n`;\n\nconst ChineseText = styled.div`\n    font-family: Iansui;\n    font-size: 4rem;\n    font-weight: 700;\n    margin-bottom: 8px;\n    line-height: 4rem;\n`;\n\nconst PinyinText = styled.div`\n    margin-top: 1rem;\n    font-size: 1rem;\n    color: #555;\n`;\n\nconst EnglishText = styled.div`\n    font-size: 1rem;\n    color: #222;\n`;\n\nconst POS = styled.div`\n    font-size: 0.8rem;\n    color: #666;\n    margin-top: 8px;\n`;\n\nconst SpeakerButton = styled.button`\n    position: absolute;\n    top: 8px;\n    right: 8px;\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    border: none;\n    background: rgba(255, 255, 255, 0.9);\n    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    font-size: 1rem;\n    transition: transform 120ms ease;\n    &:hover {\n        transform: translateY(-2px);\n    }\n`;\n","import React from \"react\";\nimport { styled } from \"styled-components\";\n\ntype SectionProps = {\n    children: React.ReactNode;\n    className?: string;\n    id?: string;\n    style?: React.CSSProperties;\n};\n\nexport const Section = (props: SectionProps) => {\n    return (\n        <StyledSection\n            className={props.className}\n            id={props.id}\n            style={props.style}\n        >\n            {props.children}\n        </StyledSection>\n    );\n};\n\nconst StyledSection = styled.section`\n    padding: 3em 0.25em;\n    margin: 0 auto;\n    max-width: 800px;\n\n    @media (max-width: 768px) {\n        padding: 5em 0.25em;\n        max-width: var(--maxWidth-sm);\n    }\n`;\n"],"names":["FlashcardsPage","props","vocabulary","data","allGoogleTutoringSheet","nodes","currentIndex","setCurrentIndex","React","SimpleLayout","Seo","title","pageContext","id","Section","Container","CardArea","length","Flashcard","item","NavRow","NavButton","onClick","newIndex","Counter","_ref","isFlipped","setIsFlipped","CardOuter","CardInner","flipped","toString","prev","role","tabIndex","onKeyDown","e","key","preventDefault","CardFront","SpeakerButton","stopPropagation","text","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","lang","rate","speak","err","console","warn","playChinese","chinese","ChineseText","PinyinText","pinyin","CardBack","EnglishText","english","part_of_speech","POS","styled","div","withConfig","displayName","componentId","button","_ref2","CardFace","StyledSection","className","style","children","section"],"sourceRoot":""}