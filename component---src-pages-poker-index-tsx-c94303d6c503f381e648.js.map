{"version":3,"file":"component---src-pages-poker-index-tsx-c94303d6c503f381e648.js","mappings":"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","sources":["webpack://rheajt.github.io/./src/components/poker-card-selector.tsx","webpack://rheajt.github.io/./src/components/poker-form.tsx","webpack://rheajt.github.io/./src/components/poker-seats.tsx","webpack://rheajt.github.io/./src/utils/pokerReducer.ts","webpack://rheajt.github.io/./src/pages/poker/index.tsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst suits = [\"clubs ♣\", \"diamonds ♦\", \"hearts ♥\", \"spades ♠\"];\nconst cards = [\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"10\",\n    \"J\",\n    \"Q\",\n    \"K\",\n    \"A\",\n];\n\nconst PokerCardSelector: React.FC = () => {\n    const [card, setCard] = useState(\"\");\n    const [suit, setSuit] = useState(\"\");\n\n    if (card === \"\" || suit === \"\") {\n        return (\n            <div>\n                <div>\n                    {cards.map(card => (\n                        <button onClick={() => setCard(card)} key={card}>\n                            {card}\n                        </button>\n                    ))}\n                </div>\n                <div>\n                    {suits.map(suit => (\n                        <button onClick={() => setSuit(suit[0])} key={suit}>\n                            {suit}\n                        </button>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <span\n            className=\"poker-card\"\n            onClick={() => {\n                setCard(\"\");\n                setSuit(\"\");\n            }}\n        >\n            {card}\n            {suit}\n        </span>\n    );\n};\n\nexport default PokerCardSelector;\n","import React, { FormEvent, useState } from \"react\";\nimport { PokerSeat } from \"../utils/pokerReducer\";\nimport PokerCardSelector from \"./poker-card-selector\";\n\nconst handAction = {\n    round: \"\",\n    action: \"\",\n};\n\nconst PokerForm: React.FC<{ seats: PokerSeat[] }> = ({ seats }) => {\n    const [handActions, setHandActions] = useState<typeof handAction[]>([]);\n\n    function handleSubmit(e: FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n\n        console.log(handActions);\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"pre-flop\">\n                <span>Dealt:</span>\n                <PokerCardSelector />\n                <PokerCardSelector />\n\n                <ActionSelect\n                    seats={seats}\n                    handleClick={() => {\n                        const updatedActions = [\n                            ...handActions,\n                            { round: \"pre-flop\", action: `stuff` },\n                        ];\n                        setHandActions(updatedActions);\n                    }}\n                >\n                    <div>\n                        {handActions\n                            .filter(ha => ha.round === \"pre-flop\")\n                            .map(ha => {\n                                return <p>{ha.action}</p>;\n                            })}\n                    </div>\n                </ActionSelect>\n            </div>\n            <div className=\"flop\">\n                <span>Flop</span>\n                <PokerCardSelector />\n                <PokerCardSelector />\n                <PokerCardSelector />\n\n                <ActionSelect\n                    seats={seats}\n                    handleClick={() => {\n                        const updatedActions = [\n                            ...handActions,\n                            { round: \"flop\", action: `stuff` },\n                        ];\n                        setHandActions(updatedActions);\n                    }}\n                >\n                    <div>\n                        {handActions\n                            .filter(ha => ha.round === \"flop\")\n                            .map(ha => {\n                                return <p>{ha.action}</p>;\n                            })}\n                    </div>\n                </ActionSelect>\n            </div>\n\n            <div className=\"turn\">\n                <span>Turn</span>\n                <PokerCardSelector />\n\n                <ActionSelect\n                    seats={seats}\n                    handleClick={() => {\n                        const updatedActions = [\n                            ...handActions,\n                            { round: \"turn\", action: `stuff` },\n                        ];\n                        setHandActions(updatedActions);\n                    }}\n                >\n                    <div>\n                        {handActions\n                            .filter(ha => ha.round === \"turn\")\n                            .map(ha => {\n                                return <p>{ha.action}</p>;\n                            })}\n                    </div>\n                </ActionSelect>\n            </div>\n\n            <div className=\"river\">\n                <span>River</span>\n                <PokerCardSelector />\n\n                <ActionSelect\n                    seats={seats}\n                    handleClick={() => {\n                        const updatedActions = [\n                            ...handActions,\n                            { round: \"river\", action: `stuff` },\n                        ];\n                        setHandActions(updatedActions);\n                    }}\n                >\n                    <div>\n                        {handActions\n                            .filter(ha => ha.round === \"river\")\n                            .map(ha => {\n                                return <p>{ha.action}</p>;\n                            })}\n                    </div>\n                </ActionSelect>\n            </div>\n\n            <div className=\"showdown\">\n                <button type=\"submit\">Save Hand</button>\n            </div>\n        </form>\n    );\n};\n\nexport default PokerForm;\n\nconst ActionSelect: React.FC<{\n    seats: PokerSeat[];\n    handleClick: () => void;\n    children: JSX.Element;\n}> = ({ seats, handleClick, children }) => {\n    return (\n        <>\n            <div className=\"poker-action\">\n                <select>\n                    <option value=\"UTG\">UTG</option>\n                    <option value=\"UTG+1\">UTG+1</option>\n                    <option value=\"MP\">MP</option>\n                    <option value=\"HJ\">HJ</option>\n                    <option value=\"CO\">CO</option>\n                    <option value=\"BTN\">BTN</option>\n                    <option value=\"SB\">SB</option>\n                    <option value=\"BB\">BB</option>\n                </select>\n\n                <select>\n                    {seats.map((s, idx) => {\n                        return (\n                            <option value={s.name} key={\"pre-flop-\" + idx}>\n                                {s.name}\n                            </option>\n                        );\n                    })}\n                </select>\n\n                <select>\n                    <option value=\"check\">check</option>\n                    <option value=\"bet\">bet</option>\n                    <option value=\"raise\">raise</option>\n                    <option value=\"call\">call</option>\n                    <option value=\"fold\">fold</option>\n                </select>\n\n                <input type=\"number\" />\n            </div>\n            <button onClick={handleClick}>+</button>\n\n            {children}\n        </>\n    );\n};\n","import React from \"react\";\nimport { PokerSeat } from \"../utils/pokerReducer\";\n\nconst PokerSeats: React.FC<{\n    seats: PokerSeat[];\n    handleUpdateSeat: (idx: number, update: Partial<PokerSeat>) => void;\n    handleAddSeat: () => void;\n}> = ({ seats, handleUpdateSeat, handleAddSeat }) => {\n    const updateSeat = (\n        idx: number,\n        e: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        console.log(\"on change\", idx);\n        if (e.target.type === \"checkbox\") {\n            let isChecked = e.target.checked;\n\n            handleUpdateSeat(idx, {\n                [e.target.name]: isChecked,\n            });\n        } else {\n            handleUpdateSeat(idx, {\n                [e.target.name]: e.target.value,\n            });\n        }\n    };\n    return (\n        <>\n            {seats.map((seat, idx) => {\n                return (\n                    <div className=\"poker-seat\" key={idx}>\n                        <input\n                            name=\"hero\"\n                            type=\"checkbox\"\n                            checked={seat.hero}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => updateSeat(idx, e)}\n                        />\n\n                        <input\n                            name=\"name\"\n                            value={seat.name}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => updateSeat(idx, e)}\n                        />\n\n                        <input\n                            name=\"in\"\n                            type=\"number\"\n                            value={seat.in}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => updateSeat(idx, e)}\n                        />\n\n                        <input\n                            name=\"out\"\n                            type=\"number\"\n                            value={seat.out}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => updateSeat(idx, e)}\n                        />\n                    </div>\n                );\n            })}\n\n            <button onClick={handleAddSeat}>+</button>\n        </>\n    );\n};\n\nexport default PokerSeats;\n","export interface PokerSeat {\n    name: string;\n    hero: boolean;\n    in?: number;\n    out?: number;\n}\n\n// export interface PokerHand {\n\n// }\n\ntype Actions =\n    | { type: \"add_seat\" }\n    | {\n        type: \"update_seat\";\n        payload: {\n            seatIdx: number;\n            update: Partial<PokerSeat>;\n        };\n    };\n\nconst initialSeat = {\n    name: \"\",\n    hero: false,\n    in: 0,\n};\n\nexport const initialState = {\n    seats: [initialSeat] as PokerSeat[],\n    hands: [],\n};\n\nexport const reducer = (state: typeof initialState, action: Actions) => {\n    switch (action.type) {\n        case \"add_seat\": {\n            state.seats.push(initialSeat);\n            return { ...state };\n        }\n\n        case \"update_seat\": {\n            let seat = state.seats[action.payload.seatIdx];\n            state.seats[action.payload.seatIdx] = {\n                ...seat,\n                ...action.payload.update,\n            };\n\n            console.log(state);\n            return { ...state };\n        }\n\n        // case \"add_hand\": {\n        //     const updatedHands = [...state.hands, action.payload];\n        //     return { ...state, hands: updatedHands };\n        // }\n\n        default:\n            return state;\n    }\n};\n","import { Link } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport React, { ReactNode, useReducer, useState } from \"react\";\nimport Layout from \"../../components/layout\";\nimport PokerForm from \"../../components/poker-form\";\nimport PokerSeats from \"../../components/poker-seats\";\nimport Seo from \"../../components/seo\";\nimport { initialState, reducer } from \"../../utils/pokerReducer\";\n\nconst PokerPanel: React.FC<{\n    title: string;\n    isActive: boolean;\n    handleClick: () => void;\n    children: ReactNode;\n}> = ({ title, isActive, handleClick, children }) => {\n    return (\n        <>\n            <button className=\"accordion\" onClick={handleClick}>\n                {title}\n            </button>\n\n            <div className={`panel ${isActive && \"active\"}`}>{children}</div>\n        </>\n    );\n};\n\nexport default function PokerPage({ location }) {\n    const [activeSection, setActiveSection] = useState(0);\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        <Layout title=\"Poker Notes\" location={location}>\n            <Seo title=\"Poker Notes\" />\n\n            <PokerPanel\n                title={`Game Seats (${state.seats.length})`}\n                isActive={activeSection === 1}\n                handleClick={() =>\n                    setActiveSection(val => (val === 1 ? -1 : 1))\n                }\n            >\n                <PokerSeats\n                    seats={state.seats}\n                    handleAddSeat={() =>\n                        dispatch({\n                            type: \"add_seat\",\n                        })\n                    }\n                    handleUpdateSeat={(idx, update) =>\n                        dispatch({\n                            type: \"update_seat\",\n                            payload: {\n                                seatIdx: idx,\n                                update,\n                            },\n                        })\n                    }\n                />\n            </PokerPanel>\n\n            <PokerPanel\n                title=\"Take Notes\"\n                isActive={activeSection === 2}\n                handleClick={() =>\n                    setActiveSection(val => (val === 2 ? -1 : 2))\n                }\n            >\n                <PokerForm seats={state.seats} />\n            </PokerPanel>\n\n            <PokerPanel\n                title={`All Hands (${state.hands.length})`}\n                isActive={activeSection === 3}\n                handleClick={() =>\n                    setActiveSection(val => (val === 3 ? -1 : 3))\n                }\n            >\n                <h1>all hands</h1>\n            </PokerPanel>\n            <footer>\n                <b>Poker Hand Notes</b>\n                <Link to=\"/\">\n                    <StaticImage\n                        layout=\"fixed\"\n                        formats={[\"auto\", \"webp\", \"avif\"]}\n                        src=\"../../content/img/jr-icon.png\"\n                        width={36}\n                        height={36}\n                        quality={95}\n                        alt=\"jordan rhea header\"\n                    />\n                </Link>\n            </footer>\n        </Layout>\n    );\n}\n"],"names":["suits","cards","PokerCardSelector","card","setCard","useState","suit","setSuit","React","map","onClick","key","className","_ref","seats","handActions","setHandActions","onSubmit","e","preventDefault","console","log","ActionSelect","handleClick","updatedActions","concat","_toConsumableArray","round","action","filter","ha","type","_ref2","children","value","s","idx","name","handleUpdateSeat","handleAddSeat","updateSeat","target","isChecked","checked","seat","hero","onChange","in","out","initialSeat","initialState","hands","reducer","state","push","payload","seatIdx","update","PokerPanel","title","isActive","PokerPage","location","activeSection","setActiveSection","dispatch","useReducer","Layout","Seo","length","val","PokerSeats","PokerForm","Link","to","StaticImage","layout","formats","src","width","height","quality","alt","__error"],"sourceRoot":""}