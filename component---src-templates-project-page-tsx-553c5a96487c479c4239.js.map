{"version":3,"file":"component---src-templates-project-page-tsx-553c5a96487c479c4239.js","mappings":"qKAkEA,IA7DY,WAAO,IAAD,IACRA,GAAOC,EAAAA,EAAAA,gBAAe,cAmBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAGC,EAAwBH,OAC3B,UAAGF,EAAKG,KAAKC,oBAAb,OAAGE,EAAwBC,OAEvC,OACIC,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,OACXD,EAAAA,cAACE,EAAAA,EAAD,CACID,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,qCACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,+BARR,uBAWCf,MAAAA,OAAAA,EAAAA,EAAQgB,OACLV,EAAAA,cAAAA,MAAAA,KAAAA,cACeA,EAAAA,cAAAA,SAAAA,KAASN,EAAOgB,MAAe,KACzChB,MAAAA,OAAAA,EAAAA,EAAQiB,UAAW,KAFxB,IAKIX,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,gBACXD,EAAAA,cAAAA,IAAAA,CAAGY,KAAK,6BACJZ,EAAAA,cAACa,EAAAA,IAAD,OAEJb,EAAAA,cAAAA,IAAAA,CAAGY,KAAK,kCACJZ,EAAAA,cAACc,EAAAA,IAAD,OAEJd,EAAAA,cAAAA,IAAAA,CAAGY,KAAK,kCACJZ,EAAAA,cAACe,EAAAA,IAAD,a,wHCzChC,EAZ+C,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC9C,OACIhB,EAAAA,cAAAA,aAAAA,KACIA,EAAAA,cAAAA,IAAAA,KAAIgB,EAAMC,SACVjB,EAAAA,cAAAA,OAAAA,CAAMC,UAAU,UACZD,EAAAA,cAAAA,IAAAA,KAAIgB,EAAMtB,QADd,IAC0BM,EAAAA,cAAAA,KAAAA,MACrBgB,EAAME,Y,UCyGvB,EA/D6C,SAAC,GAAwB,IAAD,EAQlC,EARa1B,EAAqB,EAArBA,KAAM2B,EAAe,EAAfA,SAC5CC,EAAU5B,EAAK6B,eACfC,GAAY,UAAA9B,EAAKG,KAAKC,oBAAV,eAAwB2B,QAAxB,QACZC,EACFhC,EAAKG,KAAKC,aAAa6B,QAAU,aAAeL,EAAQM,OAAOC,KAE/DC,OAAQC,EAERT,EAAQU,YAAYF,MACpBA,GACI,UAAApC,EAAKG,KAAKC,oBAAV,eAAwB6B,SACxBL,EAAQU,YAAYF,MAAMG,UACvBX,EAAQM,OAAOM,YACtBJ,EAAQR,EAAQM,OAAOM,WAG3B,OACIhC,EAAAA,cAACiC,EAAAA,EAAD,CAAQd,SAAUA,EAAUI,MAAOD,GAC/BtB,EAAAA,cAACkC,EAAAA,EAAD,CACIX,MAAOH,EAAQU,YAAYP,MAC3BY,YAAaf,EAAQH,QACrBW,MAAOA,IAGX5B,EAAAA,cAAAA,UAAAA,CACIC,UAAU,YACVmC,WAAS,EACTC,SAAS,6BAETrC,EAAAA,cAACsC,EAAAA,EAAD,CAAOd,IAAKA,IACZxB,EAAAA,cAAAA,SAAAA,CAAQC,UAAU,iBACdD,EAAAA,cAACuC,EAAAA,EAAD,CACIX,MACIR,EAAQU,YAAYF,MAAMY,gBACrBC,gBAEThC,IAAI,kBAGRT,EAAAA,cAAAA,KAAAA,CAAI0C,SAAS,YAAYtB,EAAQU,YAAYP,QAGhDH,EAAQU,YAAYd,OACjBhB,EAAAA,cAAAA,UAAAA,KACIA,EAAAA,cAAC2C,EAAD,CAAY3B,MAAOI,EAAQU,YAAYd,SAI/ChB,EAAAA,cAAAA,UAAAA,CACI4C,wBAAyB,CAAEC,OAAQzB,EAAQ0B,MAC3CJ,SAAS,gBAGb1C,EAAAA,cAAAA,KAAAA,MAEAA,EAAAA,cAAAA,SAAAA,KACIA,EAAAA,cAAC+C,EAAAA,EAAD,W","sources":["webpack://rheajt.github.io/./src/components/bio.tsx","webpack://rheajt.github.io/./src/components/blockquote.tsx","webpack://rheajt.github.io/./src/templates/project-page.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport { FaGithub, FaLinkedin, FaYoutube } from \"react-icons/fa\";\n\nconst Bio = () => {\n    const data = useStaticQuery(graphql`\n        query BioQuery {\n            site {\n                siteMetadata {\n                    author {\n                        name\n                        summary\n                    }\n                    social {\n                        twitter\n                        github\n                        linkedin\n                    }\n                }\n            }\n        }\n    `);\n\n    // Set these values by editing \"siteMetadata\" in gatsby-config.js\n    const author = data.site.siteMetadata?.author;\n    const social = data.site.siteMetadata?.social;\n\n    return (\n        <>\n            <div className=\"bio\">\n                <StaticImage\n                    className=\"bio-avatar\"\n                    layout=\"fixed\"\n                    formats={[\"auto\", \"webp\", \"avif\"]}\n                    src=\"../../content/img/avatar-image.png\"\n                    width={50}\n                    height={50}\n                    quality={95}\n                    alt=\"jordan rhea wearing a hoodie\"\n                />\n\n                {author?.name && (\n                    <div>\n                        Written by <strong>{author.name}</strong>{\" \"}\n                        {author?.summary || null}\n                        {` `}\n\n                        <div className=\"social-links\">\n                            <a href=\"https://github.com/rheajt\">\n                                <FaGithub />\n                            </a>\n                            <a href=\"https://linkedin.com/in/rheajt\">\n                                <FaLinkedin />\n                            </a>\n                            <a href=\"https://youtube.com/jordanrhea\">\n                                <FaYoutube />\n                            </a>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default Bio;\n","import React from \"react\";\nimport { Quote } from \"../pages\";\n\nconst Blockquote: React.FC<{ quote: Quote }> = ({ quote }) => {\n    return (\n        <blockquote>\n            <p>{quote.excerpt}</p>\n            <span className=\"author\">\n                <b>{quote.author}</b> <br />\n                {quote.position}\n            </span>\n        </blockquote>\n    );\n};\n\nexport default Blockquote;\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\";\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport Blockquote from \"../components/blockquote\";\nimport Share from \"../components/share\";\n\ninterface Props {\n    data: Data;\n    location: Location;\n}\n\ninterface Data {\n    site: {\n        siteMetadata: {\n            siteUrl: string;\n            title: string;\n        };\n    };\n    markdownRemark: {\n        id: string;\n        html: string;\n        excerpt: string;\n        frontmatter: {\n            title: string;\n            quote: {\n                author: string;\n                text: string;\n                employer: string;\n                position: string;\n                excerpt: string;\n                email?: string;\n            };\n            image: {\n                publicURL: string;\n                childImageSharp: {\n                    gatsbyImageData: IGatsbyImageData;\n                };\n            };\n        };\n        fields: {\n            date: string;\n            thumbnail: string;\n            slug: string;\n        };\n    };\n}\n\nconst ProjectPageTemplate: React.FC<Props> = ({ data, location }) => {\n    const project = data.markdownRemark;\n    const siteTitle = data.site.siteMetadata?.title || `Title`;\n    const url =\n        data.site.siteMetadata.siteUrl + \"/projects/\" + project.fields.slug;\n\n    let image = undefined;\n\n    if (project.frontmatter.image) {\n        image =\n            data.site.siteMetadata?.siteUrl +\n            project.frontmatter.image.publicURL;\n    } else if (project.fields.thumbnail) {\n        image = project.fields.thumbnail;\n    }\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <Seo\n                title={project.frontmatter.title}\n                description={project.excerpt}\n                image={image}\n            />\n\n            <article\n                className=\"blog-post\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n            >\n                <Share url={url} />\n                <header className=\"project-image\">\n                    <GatsbyImage\n                        image={\n                            project.frontmatter.image.childImageSharp\n                                .gatsbyImageData\n                        }\n                        alt=\"project image\"\n                    />\n\n                    <h1 itemProp=\"headline\">{project.frontmatter.title}</h1>\n                </header>\n\n                {project.frontmatter.quote && (\n                    <section>\n                        <Blockquote quote={project.frontmatter.quote} />\n                    </section>\n                )}\n\n                <section\n                    dangerouslySetInnerHTML={{ __html: project.html }}\n                    itemProp=\"articleBody\"\n                />\n\n                <hr />\n\n                <footer>\n                    <Bio />\n                </footer>\n            </article>\n        </Layout>\n    );\n};\n\nexport default ProjectPageTemplate;\n\nexport const projectsQuery = graphql`\n    query ProjectPagesById($id: String!) {\n        site {\n            siteMetadata {\n                title\n                siteUrl\n            }\n        }\n        markdownRemark(id: { eq: $id }) {\n            id\n            html\n            excerpt\n            frontmatter {\n                title\n                image {\n                    publicURL\n                    childImageSharp {\n                        gatsbyImageData(layout: CONSTRAINED)\n                    }\n                }\n                quote {\n                    author\n                    position\n                    employer\n                    text\n                    excerpt\n                }\n            }\n            fields {\n                date\n                thumbnail\n                slug\n            }\n        }\n    }\n`;\n"],"names":["data","useStaticQuery","author","site","siteMetadata","_data$site$siteMetada","_data$site$siteMetada2","social","React","className","StaticImage","layout","formats","src","width","height","quality","alt","name","summary","href","FaGithub","FaLinkedin","FaYoutube","quote","excerpt","position","location","project","markdownRemark","siteTitle","title","url","siteUrl","fields","slug","image","undefined","frontmatter","publicURL","thumbnail","Layout","Seo","description","itemScope","itemType","Share","GatsbyImage","childImageSharp","gatsbyImageData","itemProp","Blockquote","dangerouslySetInnerHTML","__html","html","Bio"],"sourceRoot":""}