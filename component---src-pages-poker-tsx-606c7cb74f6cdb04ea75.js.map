{"version":3,"file":"component---src-pages-poker-tsx-606c7cb74f6cdb04ea75.js","mappings":"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","sources":["webpack://rheajt.github.io/./src/components/seo.tsx","webpack://rheajt.github.io/./src/components/poker-card-selector.tsx","webpack://rheajt.github.io/./src/components/poker-form.tsx","webpack://rheajt.github.io/./src/components/poker-seats.tsx","webpack://rheajt.github.io/./src/utils/pokerReducer.ts","webpack://rheajt.github.io/./src/pages/poker.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useStaticQuery, graphql, HeadProps } from \"gatsby\";\n\ninterface Props {\n\tdescription?: string;\n\tlang?: string;\n\tmeta?: { name?: string; property?: string; content: string }[];\n\ttitle?: string;\n\timage?: string;\n}\n\nconst Seo: React.FC<Props> = ({\n\tdescription = \"\",\n\tlang = \"en\",\n\tmeta = [],\n\ttitle = \"jordanrhea.com\",\n\timage,\n}) => {\n\tconst { site } = useStaticQuery(\n\t\tgraphql`\n            query {\n                site {\n                    siteMetadata {\n                        title\n                        description\n                        siteUrl\n                        social {\n                            twitter\n                        }\n                    }\n                }\n            }\n        `\n\t);\n\n\tconst metaDescription = description || site.siteMetadata.description;\n\tconst defaultTitle = site.siteMetadata?.title;\n\n\tif (image) {\n\t\tconst content = image;\n\t\tmeta = [\n\t\t\t...meta,\n\t\t\t{\n\t\t\t\tproperty: `og:image`,\n\t\t\t\tcontent,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: `twitter:image`,\n\t\t\t\tcontent,\n\t\t\t},\n\t\t];\n\t}\n\n\treturn (\n\t\t<Helmet\n\t\t\thtmlAttributes={{\n\t\t\t\tlang,\n\t\t\t}}\n\t\t\ttitle={title}\n\t\t\ttitleTemplate={defaultTitle ? `%s | ${defaultTitle}` : undefined}\n\t\t\tmeta={[\n\t\t\t\t{\n\t\t\t\t\tname: `description`,\n\t\t\t\t\tcontent: metaDescription,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tproperty: `og:title`,\n\t\t\t\t\tcontent: title,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tproperty: `og:description`,\n\t\t\t\t\tcontent: metaDescription,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tproperty: `og:type`,\n\t\t\t\t\tcontent: `website`,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: `twitter:card`,\n\t\t\t\t\tcontent: `summary`,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: `twitter:creator`,\n\t\t\t\t\tcontent: site.siteMetadata?.social?.twitter || ``,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: `twitter:title`,\n\t\t\t\t\tcontent: title,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: `twitter:description`,\n\t\t\t\t\tcontent: metaDescription,\n\t\t\t\t},\n\t\t\t\t...meta,\n\t\t\t]}\n\t\t/>\n\t);\n};\n\nexport default Seo;\n","import React, { useState } from \"react\";\n\nconst suits = [\"clubs ♣\", \"diamonds ♦\", \"hearts ♥\", \"spades ♠\"];\nconst cards = [\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"10\",\n    \"J\",\n    \"Q\",\n    \"K\",\n    \"A\",\n];\n\nconst PokerCardSelector: React.FC = () => {\n    const [card, setCard] = useState(\"\");\n    const [suit, setSuit] = useState(\"\");\n\n    if (card === \"\" || suit === \"\") {\n        return (\n            <div>\n                <div>\n                    {cards.map(card => (\n                        <button onClick={() => setCard(card)} key={card}>\n                            {card}\n                        </button>\n                    ))}\n                </div>\n                <div>\n                    {suits.map(suit => (\n                        <button onClick={() => setSuit(suit[0])} key={suit}>\n                            {suit}\n                        </button>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <span\n            className=\"poker-card\"\n            onClick={() => {\n                setCard(\"\");\n                setSuit(\"\");\n            }}\n        >\n            {card}\n            {suit}\n        </span>\n    );\n};\n\nexport default PokerCardSelector;\n","import React, { FormEvent, useState } from \"react\";\nimport { PokerSeat } from \"../utils/pokerReducer\";\nimport PokerCardSelector from \"./poker-card-selector\";\n\nconst handAction = {\n    round: \"\",\n    action: \"\",\n};\n\nconst PokerForm: React.FC<{ seats: PokerSeat[] }> = ({ seats }) => {\n    const [handActions, setHandActions] = useState<typeof handAction[]>([]);\n\n    function handleSubmit(e: FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n\n        console.log(handActions);\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"pre-flop\">\n                <span>Dealt:</span>\n                <PokerCardSelector />\n                <PokerCardSelector />\n\n                <ActionSelect\n                    seats={seats}\n                    handleClick={() => {\n                        const updatedActions = [\n                            ...handActions,\n                            { round: \"pre-flop\", action: `stuff` },\n                        ];\n                        setHandActions(updatedActions);\n                    }}\n                >\n                    <div>\n                        {handActions\n                            .filter(ha => ha.round === \"pre-flop\")\n                            .map(ha => {\n                                return <p>{ha.action}</p>;\n                            })}\n                    </div>\n                </ActionSelect>\n            </div>\n            <div className=\"flop\">\n                <span>Flop</span>\n                <PokerCardSelector />\n                <PokerCardSelector />\n                <PokerCardSelector />\n\n                <ActionSelect\n                    seats={seats}\n                    handleClick={() => {\n                        const updatedActions = [\n                            ...handActions,\n                            { round: \"flop\", action: `stuff` },\n                        ];\n                        setHandActions(updatedActions);\n                    }}\n                >\n                    <div>\n                        {handActions\n                            .filter(ha => ha.round === \"flop\")\n                            .map(ha => {\n                                return <p>{ha.action}</p>;\n                            })}\n                    </div>\n                </ActionSelect>\n            </div>\n\n            <div className=\"turn\">\n                <span>Turn</span>\n                <PokerCardSelector />\n\n                <ActionSelect\n                    seats={seats}\n                    handleClick={() => {\n                        const updatedActions = [\n                            ...handActions,\n                            { round: \"turn\", action: `stuff` },\n                        ];\n                        setHandActions(updatedActions);\n                    }}\n                >\n                    <div>\n                        {handActions\n                            .filter(ha => ha.round === \"turn\")\n                            .map(ha => {\n                                return <p>{ha.action}</p>;\n                            })}\n                    </div>\n                </ActionSelect>\n            </div>\n\n            <div className=\"river\">\n                <span>River</span>\n                <PokerCardSelector />\n\n                <ActionSelect\n                    seats={seats}\n                    handleClick={() => {\n                        const updatedActions = [\n                            ...handActions,\n                            { round: \"river\", action: `stuff` },\n                        ];\n                        setHandActions(updatedActions);\n                    }}\n                >\n                    <div>\n                        {handActions\n                            .filter(ha => ha.round === \"river\")\n                            .map(ha => {\n                                return <p>{ha.action}</p>;\n                            })}\n                    </div>\n                </ActionSelect>\n            </div>\n\n            <div className=\"showdown\">\n                <button type=\"submit\">Save Hand</button>\n            </div>\n        </form>\n    );\n};\n\nexport default PokerForm;\n\nconst ActionSelect: React.FC<{\n    seats: PokerSeat[];\n    handleClick: () => void;\n    children: JSX.Element;\n}> = ({ seats, handleClick, children }) => {\n    return (\n        <>\n            <div className=\"poker-action\">\n                <select>\n                    <option value=\"UTG\">UTG</option>\n                    <option value=\"UTG+1\">UTG+1</option>\n                    <option value=\"MP\">MP</option>\n                    <option value=\"HJ\">HJ</option>\n                    <option value=\"CO\">CO</option>\n                    <option value=\"BTN\">BTN</option>\n                    <option value=\"SB\">SB</option>\n                    <option value=\"BB\">BB</option>\n                </select>\n\n                <select>\n                    {seats.map((s, idx) => {\n                        return (\n                            <option value={s.name} key={\"pre-flop-\" + idx}>\n                                {s.name}\n                            </option>\n                        );\n                    })}\n                </select>\n\n                <select>\n                    <option value=\"check\">check</option>\n                    <option value=\"bet\">bet</option>\n                    <option value=\"raise\">raise</option>\n                    <option value=\"call\">call</option>\n                    <option value=\"fold\">fold</option>\n                </select>\n\n                <input type=\"number\" />\n            </div>\n            <button onClick={handleClick}>+</button>\n\n            {children}\n        </>\n    );\n};\n","import React from \"react\";\nimport { PokerSeat } from \"../utils/pokerReducer\";\n\nconst PokerSeats: React.FC<{\n    seats: PokerSeat[];\n    handleUpdateSeat: (idx: number, update: Partial<PokerSeat>) => void;\n    handleAddSeat: () => void;\n}> = ({ seats, handleUpdateSeat, handleAddSeat }) => {\n    const updateSeat = (\n        idx: number,\n        e: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        console.log(\"on change\", idx);\n        if (e.target.type === \"checkbox\") {\n            let isChecked = e.target.checked;\n\n            handleUpdateSeat(idx, {\n                [e.target.name]: isChecked,\n            });\n        } else {\n            handleUpdateSeat(idx, {\n                [e.target.name]: e.target.value,\n            });\n        }\n    };\n    return (\n        <>\n            {seats.map((seat, idx) => {\n                return (\n                    <div className=\"poker-seat\" key={idx}>\n                        <input\n                            name=\"hero\"\n                            type=\"checkbox\"\n                            checked={seat.hero}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => updateSeat(idx, e)}\n                        />\n\n                        <input\n                            name=\"name\"\n                            value={seat.name}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => updateSeat(idx, e)}\n                        />\n\n                        <input\n                            name=\"in\"\n                            type=\"number\"\n                            value={seat.in}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => updateSeat(idx, e)}\n                        />\n\n                        <input\n                            name=\"out\"\n                            type=\"number\"\n                            value={seat.out}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => updateSeat(idx, e)}\n                        />\n                    </div>\n                );\n            })}\n\n            <button onClick={handleAddSeat}>+</button>\n        </>\n    );\n};\n\nexport default PokerSeats;\n","export interface PokerSeat {\n    name: string;\n    hero: boolean;\n    in?: number;\n    out?: number;\n}\n\n// export interface PokerHand {\n\n// }\n\ntype Actions =\n    | { type: \"add_seat\" }\n    | {\n        type: \"update_seat\";\n        payload: {\n            seatIdx: number;\n            update: Partial<PokerSeat>;\n        };\n    };\n\nconst initialSeat = {\n    name: \"\",\n    hero: false,\n    in: 0,\n};\n\nexport const initialState = {\n    seats: [initialSeat] as PokerSeat[],\n    hands: [],\n};\n\nexport const reducer = (state: typeof initialState, action: Actions) => {\n    switch (action.type) {\n        case \"add_seat\": {\n            state.seats.push(initialSeat);\n            return { ...state };\n        }\n\n        case \"update_seat\": {\n            let seat = state.seats[action.payload.seatIdx];\n            state.seats[action.payload.seatIdx] = {\n                ...seat,\n                ...action.payload.update,\n            };\n\n            console.log(state);\n            return { ...state };\n        }\n\n        // case \"add_hand\": {\n        //     const updatedHands = [...state.hands, action.payload];\n        //     return { ...state, hands: updatedHands };\n        // }\n\n        default:\n            return state;\n    }\n};\n","import { Link } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport React, { ReactNode, useReducer, useState } from \"react\";\nimport PokerForm from \"../components/poker-form\";\nimport PokerSeats from \"../components/poker-seats\";\nimport Seo from \"../components/seo\";\nimport { initialState, reducer } from \"../utils/pokerReducer\";\n\nconst PokerPanel: React.FC<{\n    title: string;\n    isActive: boolean;\n    handleClick: () => void;\n    children: ReactNode;\n}> = ({ title, isActive, handleClick, children }) => {\n    return (\n        <>\n            <button className=\"accordion\" onClick={handleClick}>\n                {title}\n            </button>\n\n            <div className={`panel ${isActive && \"active\"}`}>{children}</div>\n        </>\n    );\n};\n\nconst PokerPage: React.FC = () => {\n    const [activeSection, setActiveSection] = useState(0);\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        <div className=\"poker-page\">\n            <Seo title=\"Poker Notes\" />\n\n            <PokerPanel\n                title={`Game Seats (${state.seats.length})`}\n                isActive={activeSection === 1}\n                handleClick={() =>\n                    setActiveSection(val => (val === 1 ? -1 : 1))\n                }\n            >\n                <PokerSeats\n                    seats={state.seats}\n                    handleAddSeat={() =>\n                        dispatch({\n                            type: \"add_seat\",\n                        })\n                    }\n                    handleUpdateSeat={(idx, update) =>\n                        dispatch({\n                            type: \"update_seat\",\n                            payload: {\n                                seatIdx: idx,\n                                update,\n                            },\n                        })\n                    }\n                />\n            </PokerPanel>\n\n            <PokerPanel\n                title=\"Take Notes\"\n                isActive={activeSection === 2}\n                handleClick={() =>\n                    setActiveSection(val => (val === 2 ? -1 : 2))\n                }\n            >\n                <PokerForm seats={state.seats} />\n            </PokerPanel>\n\n            <PokerPanel\n                title={`All Hands (${state.hands.length})`}\n                isActive={activeSection === 3}\n                handleClick={() =>\n                    setActiveSection(val => (val === 3 ? -1 : 3))\n                }\n            >\n                <h1>all hands</h1>\n            </PokerPanel>\n            <footer>\n                <b>Poker Hand Notes</b>\n                <Link to=\"/\">\n                    <StaticImage\n                        layout=\"fixed\"\n                        formats={[\"auto\", \"webp\", \"avif\"]}\n                        src=\"../../content/img/jr-icon.png\"\n                        width={36}\n                        height={36}\n                        quality={95}\n                        alt=\"jordan rhea header\"\n                    />\n                </Link>\n            </footer>\n        </div>\n    );\n};\n\nexport default PokerPage;\n"],"names":["_ref","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","lang","meta","title","image","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","content","concat","_toConsumableArray","property","name","React","Helmet","htmlAttributes","titleTemplate","undefined","social","twitter","suits","cards","PokerCardSelector","card","setCard","useState","suit","setSuit","map","onClick","key","className","seats","handActions","setHandActions","onSubmit","e","preventDefault","console","log","ActionSelect","handleClick","updatedActions","round","action","filter","ha","type","_ref2","children","value","s","idx","handleUpdateSeat","handleAddSeat","updateSeat","target","isChecked","checked","seat","hero","onChange","in","out","initialSeat","initialState","hands","reducer","state","push","payload","seatIdx","update","PokerPanel","isActive","PokerPage","activeSection","setActiveSection","dispatch","useReducer","Seo","length","val","PokerSeats","PokerForm","Link","to","StaticImage","layout","formats","src","width","height","quality","alt","__imageData","require"],"sourceRoot":""}